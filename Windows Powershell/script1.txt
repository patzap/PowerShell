**********************
Windows PowerShell transcript start
Start time: 20191202121858
Username: LAPTOP-TKR6M1AE\flame
RunAs User: LAPTOP-TKR6M1AE\flame
Configuration Name: 
Machine: LAPTOP-TKR6M1AE (Microsoft Windows NT 10.0.18362.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 20584
PSVersion: 5.1.18362.145
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.18362.145
BuildVersion: 10.0.18362.145
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\Users\flame\Documents\Powershell\script1.txt
PS C:\Windows\system32> get-verb | measure


Count    : 98
Average  :
Sum      :
Maximum  :
Minimum  :
Property :



PS C:\Windows\system32> get-help *measure


Name          : measure
Category      : Alias
Synopsis      : Measure-Object
Component     :
Role          :
Functionality :



PS C:\Windows\system32> get-help measure-object

NAME
    Measure-Object

SYNOPSIS
    Calculates the numeric properties of objects, and the characters, words, and lines in string objects, such as
    files of text.


SYNTAX
    Measure-Object [[-Property] <String[]>] [-Average] [-InputObject <PSObject>] [-Maximum] [-Minimum] [-Sum]
    [<CommonParameters>]

    Measure-Object [[-Property] <String[]>] [-Character] [-IgnoreWhiteSpace] [-InputObject <PSObject>] [-Line] [-Word]
    [<CommonParameters>]


DESCRIPTION
    The Measure-Object cmdlet calculates the property values of certain types of object. Measure-Object performs three
    types of measurements, depending on the parameters in the command.

    The Measure-Object cmdlet performs calculations on the property values of objects. It can count objects and
    calculate the minimum, maximum, sum, and average of the numeric values. For text objects, it can count and
    calculate the number of lines, words, and characters.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821829
    Compare-Object
    Group-Object
    New-Object
    Select-Object
    Sort-Object
    Tee-Object

REMARKS
    To see the examples, type: "get-help Measure-Object -examples".
    For more information, type: "get-help Measure-Object -detailed".
    For technical information, type: "get-help Measure-Object -full".
    For online help, type: "get-help Measure-Object -online"


PS C:\Windows\system32> get-help measure-object -detailed

NAME
    Measure-Object

SYNOPSIS
    Calculates the numeric properties of objects, and the characters, words, and lines in string objects, such as
    files of text.


SYNTAX
    Measure-Object [[-Property] <String[]>] [-Average] [-InputObject <PSObject>] [-Maximum] [-Minimum] [-Sum]
    [<CommonParameters>]

    Measure-Object [[-Property] <String[]>] [-Character] [-IgnoreWhiteSpace] [-InputObject <PSObject>] [-Line] [-Word]
    [<CommonParameters>]


DESCRIPTION
    The Measure-Object cmdlet calculates the property values of certain types of object. Measure-Object performs three
    types of measurements, depending on the parameters in the command.

    The Measure-Object cmdlet performs calculations on the property values of objects. It can count objects and
    calculate the minimum, maximum, sum, and average of the numeric values. For text objects, it can count and
    calculate the number of lines, words, and characters.


PARAMETERS
    -Average [<SwitchParameter>]
        Indicates that the cmdlet displays the average value of the specified properties.

    -Character [<SwitchParameter>]
        Indicates that the cmdlet counts the number of characters in the input object.

    -IgnoreWhiteSpace [<SwitchParameter>]
        Indicates that the cmdlet ignores white space in word counts and character counts. By default, white space is
        not ignored.

    -InputObject <PSObject>
        Specifies the objects to be measured. Enter a variable that contains the objects, or type a command or
        expression that gets the objects.

        When you use the InputObject parameter with Measure-Object , instead of piping command results to
        Measure-Object , the InputObject value-even if the value is a collection that is the result of a command, such
        as `-InputObject (Get-Process)`-is treated as a single object. Because InputObject cannot return individual
        properties from an array or collection of objects, it is recommended that if you use Measure-Object to measure
        a collection of objects for those objects that have specific values in defined properties, you use
        Measure-Object in the pipeline, as shown in the examples in this topic.

    -Line [<SwitchParameter>]
        Indicates that the cmdlet counts the number of lines in the input object.

    -Maximum [<SwitchParameter>]
        Indicates that the cmdlet displays the maximum value of the specified properties.

    -Minimum [<SwitchParameter>]
        Indicates that the cmdlet displays the minimum value of the specified properties.

    -Property <String[]>
        Specifies one or more numeric properties to measure. The default is the Count property of the object.

    -Sum [<SwitchParameter>]
        Indicates that the cmdlet displays the sum of the values of the specified properties.

    -Word [<SwitchParameter>]
        Indicates that the cmdlet counts the number of words in the input object.

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216).

    Example 1: Count the files and folders in a directory

    PS C:\>Get-ChildItem | Measure-Object

    This command counts the files and folders in the current directory.
    Example 2: Measure the files in a directory

    PS C:\>Get-ChildItem | Measure-Object -Property length -Minimum -Maximum -Average

    This command displays the minimum, maximum, and sum of the sizes of all files in the current directory, and the
    average size of a file in the directory.
    Example 3: Measure text in a text file

    PS C:\>Get-Content C:\test.txt | Measure-Object -Character -Line -Word

    This command displays the number of characters, words, and lines in the Text.txt file.
    Example 4: Measure computer processes

    PS C:\>Get-Process | Measure-Object -Property workingset -Minimum -Maximum -Average

    This command displays the minimum, maximum, and average sizes of the working sets of the processes on the computer.
    Example 5: Measure the contents of a CSV file

    PS C:\>Import-Csv d:\test\serviceyrs.csv | Measure-Object -Property years -Minimum -Maximum -Average

    This command calculates the average years of service of the employees of a company.

    The ServiceYrs.csv file is a CSV file that contains the employee number and years of service of each employee. The
    first row in the table is a header row of EmpNo, Years.

    When you use Import-Csv to import the file, the result is a PSCustomObject with note properties of EmpNo and
    Years. You can use Measure-Object to calculate the values of these properties, just like any other property of an
    object.
    Example 6: Measure Boolean values

    PS C:\>Get-ChildItem | Measure-Object -Property psiscontainer -Max -Sum -Min -Average
    Count    : 126
    Average  : 0.0634920634920635
    Sum      : 8
    Maximum  : 1
    Minimum  : 0
    Property : PSIsContainer

    This example demonstrates how the Measure-Object can measure Boolean values. In this case, it uses the
    PSIsContainer Boolean property to measure the incidence of folders (vs. files) in the current directory.
REMARKS
    To see the examples, type: "get-help Measure-Object -examples".
    For more information, type: "get-help Measure-Object -detailed".
    For technical information, type: "get-help Measure-Object -full".
    For online help, type: "get-help Measure-Object -online"


PS C:\Windows\system32> get-help Get-Service -examples

NAME
    Get-Service

SYNOPSIS
    Gets the services on a local or remote computer.


    Example 1: Get all services on the computer

    PS C:\>Get-Service

    This command gets all of the services on the computer. It behaves as though you typed `Get-Service *`. The default
    display shows the status, service name, and display name of each service.
    Example 2: Get services that begin with a search string

    PS C:\>Get-Service "wmi*"

    This command retrieves services with service names that begin with WMI (the acronym for Windows Management
    Instrumentation).
    Example 3: Display services that include a search string

    PS C:\>Get-Service -Displayname "*network*"

    This command displays services with a display name that includes the word network. Searching the display name
    finds network-related services even when the service name does not include "Net", such as xmlprov, the Network
    Provisioning Service.
    Example 4: Get services that begin with a search string and an exclusion

    PS C:\>Get-Service -Name "win*" -Exclude "WinRM"

    These commands get only the services with service names that begin with win, except for the WinRM service.
    Example 5: Display services that are currently active

    PS C:\>Get-Service | Where-Object {$_.Status -eq "Running"}

    This command displays only the services that are currently active. It uses the Get-Service cmdlet to get all of
    the services on the computer. The pipeline operator (|) passes the results to the Where-Object cmdlet, which
    selects only the services with a Status property that equals Running.

    Status is only one property of service objects. To see all of the properties, type `Get-Service | Get-Member`.
    Example 6: Get the services on a remote computer

    PS C:\>Get-Service -ComputerName "Server02"

    This command gets the services on the Server02 remote computer.

    Because the ComputerName parameter of Get-Service does not use Windows PowerShell remoting, you can use this
    parameter even if the computer is not configured for remoting in Windows PowerShell.
    Example 7: List the services on the local computer that have dependent services

    PS C:\>Get-Service | Where-Object {$_.DependentServices} | Format-List -Property Name, DependentServices,
    @{Label="NoOfDependentServices"; Expression={$_.dependentservices.count}}








    Name                  : AudioEndpointBuilder
    DependentServices     : {AudioSrv}
    NoOfDependentServices : 1
    Name                  : Dhcp
    DependentServices     : {WinHttpAutoProxySvc}
    NoOfDependentServices : 1
    ...

    This example lists the services on the computer that have dependent services.

    The first command uses the Get-Service cmdlet to get the services on the computer. A pipeline operator (|) sends
    the services to the Where-Object cmdlet, which selects the services whose DependentServices property is not null.

    Another pipeline operator sends the results to the Format-List cmdlet. The command uses its Property parameter to
    display the name of the service, the name of the dependent services, and a calculated property that displays the
    number of dependent services that each service has.
    Example 8: Sort services by property value

    PS C:\>Get-Service "s*" | Sort-Object status

    Status   Name               DisplayName
    ------   ----               -----------
    Stopped  stisvc             Windows Image Acquisition (WIA)
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  SysmonLog          Performance Logs and Alerts
    Running  Spooler            Print Spooler
    Running  srservice          System Restore Service
    Running  SSDPSRV            SSDP Discovery Service
    Running  ShellHWDetection   Shell Hardware Detection
    Running  Schedule           Task Scheduler
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon

    PS C:\>Get-Service "s*" | Sort-Object status -Descending

    Status   Name               DisplayName
    ------   ----               -----------
    Running  ShellHWDetection   Shell Hardware Detection
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  Spooler            Print Spooler
    Running  SSDPSRV            SSDP Discovery Service
    Running  srservice          System Restore Service
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  Schedule           Task Scheduler
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon
    Stopped  SysmonLog          Performance Logs and Alerts
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  stisvc             Windows Image Acquisition (WIA)

    This command shows that when you sort services in ascending order by the value of their Status property, stopped
    services appear before running services. This happens because the value of Status is an enumeration, in which
    Stopped has a value of 1, and Running has a value of 4.

    To list running services first, use the Descending parameter of the Sort-Object cmdlet.
    Example 9: Get services on multiple computers

    PS C:\>Get-Service -Name "WinRM" -ComputerName "localhost", "Server01", "Server02" | Format-Table -Property
    MachineName, Status, Name, DisplayName -auto






    MachineName    Status  Name  DisplayName
    ------------   ------  ----  -----------
    localhost      Running WinRM Windows Remote Management (WS-Management)
    Server01       Running WinRM Windows Remote Management (WS-Management)
    Server02       Running WinRM Windows Remote Management (WS-Management)

    This command uses the Get-Service cmdlet to run a Get-Service Winrm command on two remote computers and the local
    computer ("localhost").

    The command runs on the remote computers, and the results are returned to the local computer. A pipeline operator
    (|) sends the results to the Format-Table cmdlet, which formats the services as a table. The Format-Table command
    uses the Property parameter to specify the properties displayed in the table, including the MachineName property.
    Example 10: Get the dependent services of a service

    PS C:\>Get-Service "WinRM" -RequiredServices

    This command gets the services that the WinRM service requires.

    The command returns the value of the ServicesDependedOn property of the service.
    Example 11: Get a service through the pipeline operator

    PS C:\>"WinRM" | Get-Service

    This command gets the WinRM service on the local computer. This example shows that you can pipe a service name
    string (enclosed in quotation marks) to Get-Service .



PS C:\Windows\system32> get-help Get-Service -detailed

NAME
    Get-Service

SYNOPSIS
    Gets the services on a local or remote computer.


SYNTAX
    Get-Service [-ComputerName <String[]>] [-DependentServices] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices] [<CommonParameters>]

    Get-Service [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] [-InputObject <ServiceController[]>] [-RequiredServices] [<CommonParameters>]

    Get-Service [[-Name] <String[]>] [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices] [<CommonParameters>]


DESCRIPTION
    The Get-Service cmdlet gets objects that represent the services on a local computer or on a remote computer, including running and stopped services.

    You can direct this cmdlet to get only particular services by specifying the service name or display name of the services, or you can pipe service objects to this cmdlet.


PARAMETERS
    -ComputerName <String[]>
        Gets the services running on the specified computers. The default is the local computer.

        Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of a remote computer. To specify the local computer, type the computer name, a dot (.), or localhost.

        This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-Service even if your computer is not configured to run remote commands.

    -DependentServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that depend upon the specified service.

        By default, this cmdlet gets all services.

    -DisplayName <String[]>
        Specifies, as a string array, the display names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets all services on the computer.

    -Exclude <String[]>
        Specifies, as a string array, a service or services that this cmdlet excludes from the operation. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.

    -Include <String[]>
        Specifies, as a string array, a service or services that this cmdlet includes in the operation. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.

    -InputObject <ServiceController[]>
        Specifies ServiceController objects representing the services to be retrieved. Enter a variable that contains the objects, or type a command or expression that gets the objects. You can also pipe a service object to this cmdlet.

    -Name <String[]>
        Specifies the service names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets all of the services on the computer.

    -RequiredServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that this service requires.

        This parameter gets the value of the ServicesDependedOn property of the service. By default, this cmdlet gets all services.

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216).

    Example 1: Get all services on the computer

    PS C:\>Get-Service

    This command gets all of the services on the computer. It behaves as though you typed `Get-Service *`. The default display shows the status, service name, and display name of each service.
    Example 2: Get services that begin with a search string

    PS C:\>Get-Service "wmi*"

    This command retrieves services with service names that begin with WMI (the acronym for Windows Management Instrumentation).
    Example 3: Display services that include a search string

    PS C:\>Get-Service -Displayname "*network*"

    This command displays services with a display name that includes the word network. Searching the display name finds network-related services even when the service name does not include "Net", such as xmlprov, the Network
    Provisioning Service.
    Example 4: Get services that begin with a search string and an exclusion

    PS C:\>Get-Service -Name "win*" -Exclude "WinRM"

    These commands get only the services with service names that begin with win, except for the WinRM service.
    Example 5: Display services that are currently active

    PS C:\>Get-Service | Where-Object {$_.Status -eq "Running"}

    This command displays only the services that are currently active. It uses the Get-Service cmdlet to get all of the services on the computer. The pipeline operator (|) passes the results to the Where-Object cmdlet, which selects
    only the services with a Status property that equals Running.

    Status is only one property of service objects. To see all of the properties, type `Get-Service | Get-Member`.
    Example 6: Get the services on a remote computer

    PS C:\>Get-Service -ComputerName "Server02"

    This command gets the services on the Server02 remote computer.

    Because the ComputerName parameter of Get-Service does not use Windows PowerShell remoting, you can use this parameter even if the computer is not configured for remoting in Windows PowerShell.
    Example 7: List the services on the local computer that have dependent services

    PS C:\>Get-Service | Where-Object {$_.DependentServices} | Format-List -Property Name, DependentServices, @{Label="NoOfDependentServices"; Expression={$_.dependentservices.count}}








    Name                  : AudioEndpointBuilder
    DependentServices     : {AudioSrv}
    NoOfDependentServices : 1
    Name                  : Dhcp
    DependentServices     : {WinHttpAutoProxySvc}
    NoOfDependentServices : 1
    ...

    This example lists the services on the computer that have dependent services.

    The first command uses the Get-Service cmdlet to get the services on the computer. A pipeline operator (|) sends the services to the Where-Object cmdlet, which selects the services whose DependentServices property is not null.

    Another pipeline operator sends the results to the Format-List cmdlet. The command uses its Property parameter to display the name of the service, the name of the dependent services, and a calculated property that displays the
    number of dependent services that each service has.
    Example 8: Sort services by property value

    PS C:\>Get-Service "s*" | Sort-Object status

    Status   Name               DisplayName
    ------   ----               -----------
    Stopped  stisvc             Windows Image Acquisition (WIA)
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  SysmonLog          Performance Logs and Alerts
    Running  Spooler            Print Spooler
    Running  srservice          System Restore Service
    Running  SSDPSRV            SSDP Discovery Service
    Running  ShellHWDetection   Shell Hardware Detection
    Running  Schedule           Task Scheduler
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon

    PS C:\>Get-Service "s*" | Sort-Object status -Descending

    Status   Name               DisplayName
    ------   ----               -----------
    Running  ShellHWDetection   Shell Hardware Detection
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  Spooler            Print Spooler
    Running  SSDPSRV            SSDP Discovery Service
    Running  srservice          System Restore Service
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  Schedule           Task Scheduler
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon
    Stopped  SysmonLog          Performance Logs and Alerts
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  stisvc             Windows Image Acquisition (WIA)

    This command shows that when you sort services in ascending order by the value of their Status property, stopped services appear before running services. This happens because the value of Status is an enumeration, in which Stopped
    has a value of 1, and Running has a value of 4.

    To list running services first, use the Descending parameter of the Sort-Object cmdlet.
    Example 9: Get services on multiple computers

    PS C:\>Get-Service -Name "WinRM" -ComputerName "localhost", "Server01", "Server02" | Format-Table -Property MachineName, Status, Name, DisplayName -auto






    MachineName    Status  Name  DisplayName
    ------------   ------  ----  -----------
    localhost      Running WinRM Windows Remote Management (WS-Management)
    Server01       Running WinRM Windows Remote Management (WS-Management)
    Server02       Running WinRM Windows Remote Management (WS-Management)

    This command uses the Get-Service cmdlet to run a Get-Service Winrm command on two remote computers and the local computer ("localhost").

    The command runs on the remote computers, and the results are returned to the local computer. A pipeline operator (|) sends the results to the Format-Table cmdlet, which formats the services as a table. The Format-Table command
    uses the Property parameter to specify the properties displayed in the table, including the MachineName property.
    Example 10: Get the dependent services of a service

    PS C:\>Get-Service "WinRM" -RequiredServices

    This command gets the services that the WinRM service requires.

    The command returns the value of the ServicesDependedOn property of the service.
    Example 11: Get a service through the pipeline operator

    PS C:\>"WinRM" | Get-Service

    This command gets the WinRM service on the local computer. This example shows that you can pipe a service name string (enclosed in quotation marks) to Get-Service .
REMARKS
    To see the examples, type: "get-help Get-Service -examples".
    For more information, type: "get-help Get-Service -detailed".
    For technical information, type: "get-help Get-Service -full".
    For online help, type: "get-help Get-Service -online"


PS C:\Windows\system32> get-help Get-Service -full

NAME
    Get-Service

SYNOPSIS
    Gets the services on a local or remote computer.


SYNTAX
    Get-Service [-ComputerName <String[]>] [-DependentServices] -DisplayName <String[]> [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices] [<CommonParameters>]

    Get-Service [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] [-InputObject <ServiceController[]>] [-RequiredServices] [<CommonParameters>]

    Get-Service [[-Name] <String[]>] [-ComputerName <String[]>] [-DependentServices] [-Exclude <String[]>] [-Include <String[]>] [-RequiredServices] [<CommonParameters>]


DESCRIPTION
    The Get-Service cmdlet gets objects that represent the services on a local computer or on a remote computer, including running and stopped services.

    You can direct this cmdlet to get only particular services by specifying the service name or display name of the services, or you can pipe service objects to this cmdlet.


PARAMETERS
    -ComputerName <String[]>
        Gets the services running on the specified computers. The default is the local computer.

        Type the NetBIOS name, an IP address, or a fully qualified domain name (FQDN) of a remote computer. To specify the local computer, type the computer name, a dot (.), or localhost.

        This parameter does not rely on Windows PowerShell remoting. You can use the ComputerName parameter of Get-Service even if your computer is not configured to run remote commands.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByPropertyName)
        Accept wildcard characters?  false

    -DependentServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that depend upon the specified service.

        By default, this cmdlet gets all services.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -DisplayName <String[]>
        Specifies, as a string array, the display names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets all services on the computer.

        Required?                    true
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Exclude <String[]>
        Specifies, as a string array, a service or services that this cmdlet excludes from the operation. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -Include <String[]>
        Specifies, as a string array, a service or services that this cmdlet includes in the operation. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as "s*". Wildcards are permitted.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       False
        Accept wildcard characters?  false

    -InputObject <ServiceController[]>
        Specifies ServiceController objects representing the services to be retrieved. Enter a variable that contains the objects, or type a command or expression that gets the objects. You can also pipe a service object to this cmdlet.

        Required?                    false
        Position?                    named
        Default value                None
        Accept pipeline input?       True (ByValue)
        Accept wildcard characters?  false

    -Name <String[]>
        Specifies the service names of services to be retrieved. Wildcards are permitted. By default, this cmdlet gets all of the services on the computer.

        Required?                    false
        Position?                    0
        Default value                None
        Accept pipeline input?       True (ByPropertyName, ByValue)
        Accept wildcard characters?  false

    -RequiredServices [<SwitchParameter>]
        Indicates that this cmdlet gets only the services that this service requires.

        This parameter gets the value of the ServicesDependedOn property of the service. By default, this cmdlet gets all services.

        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       False
        Accept wildcard characters?  false

    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see
        about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216).

INPUTS
    System.ServiceProcess.ServiceController, System.String
        You can pipe a service object or a service name to this cmdlet.


OUTPUTS
    System.ServiceProcess.ServiceController
        This cmdlet returns objects that represent the services on the computer.


NOTES


        You can also refer to Get-Service * by its built-in alias, "gsv". For more information, see about_Aliases.

        This cmdlet can display services only when the current user has permission to see them. If this cmdlet does not display services, you might not have permission to see them.

        To find the service name and display name of each service on your system, type `Get-Service`. The service names appear in the Name column, and the display names appear in the DisplayName column.

        When you sort in ascending order by status value, "Stopped" services appear before "Running" services. The Status property of a service is an enumerated value in which the names of the statuses represent integer values. The
        sort is based on the integer value, not the name. "Running" appears before "Stopped" because "Stopped" has a value of "1", and "Running" has a value of "4".

        *

    Example 1: Get all services on the computer

    PS C:\>Get-Service

    This command gets all of the services on the computer. It behaves as though you typed `Get-Service *`. The default display shows the status, service name, and display name of each service.
    Example 2: Get services that begin with a search string

    PS C:\>Get-Service "wmi*"

    This command retrieves services with service names that begin with WMI (the acronym for Windows Management Instrumentation).
    Example 3: Display services that include a search string

    PS C:\>Get-Service -Displayname "*network*"

    This command displays services with a display name that includes the word network. Searching the display name finds network-related services even when the service name does not include "Net", such as xmlprov, the Network
    Provisioning Service.
    Example 4: Get services that begin with a search string and an exclusion

    PS C:\>Get-Service -Name "win*" -Exclude "WinRM"

    These commands get only the services with service names that begin with win, except for the WinRM service.
    Example 5: Display services that are currently active

    PS C:\>Get-Service | Where-Object {$_.Status -eq "Running"}

    This command displays only the services that are currently active. It uses the Get-Service cmdlet to get all of the services on the computer. The pipeline operator (|) passes the results to the Where-Object cmdlet, which selects
    only the services with a Status property that equals Running.

    Status is only one property of service objects. To see all of the properties, type `Get-Service | Get-Member`.
    Example 6: Get the services on a remote computer

    PS C:\>Get-Service -ComputerName "Server02"

    This command gets the services on the Server02 remote computer.

    Because the ComputerName parameter of Get-Service does not use Windows PowerShell remoting, you can use this parameter even if the computer is not configured for remoting in Windows PowerShell.
    Example 7: List the services on the local computer that have dependent services

    PS C:\>Get-Service | Where-Object {$_.DependentServices} | Format-List -Property Name, DependentServices, @{Label="NoOfDependentServices"; Expression={$_.dependentservices.count}}








    Name                  : AudioEndpointBuilder
    DependentServices     : {AudioSrv}
    NoOfDependentServices : 1
    Name                  : Dhcp
    DependentServices     : {WinHttpAutoProxySvc}
    NoOfDependentServices : 1
    ...

    This example lists the services on the computer that have dependent services.

    The first command uses the Get-Service cmdlet to get the services on the computer. A pipeline operator (|) sends the services to the Where-Object cmdlet, which selects the services whose DependentServices property is not null.

    Another pipeline operator sends the results to the Format-List cmdlet. The command uses its Property parameter to display the name of the service, the name of the dependent services, and a calculated property that displays the
    number of dependent services that each service has.
    Example 8: Sort services by property value

    PS C:\>Get-Service "s*" | Sort-Object status

    Status   Name               DisplayName
    ------   ----               -----------
    Stopped  stisvc             Windows Image Acquisition (WIA)
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  SysmonLog          Performance Logs and Alerts
    Running  Spooler            Print Spooler
    Running  srservice          System Restore Service
    Running  SSDPSRV            SSDP Discovery Service
    Running  ShellHWDetection   Shell Hardware Detection
    Running  Schedule           Task Scheduler
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon

    PS C:\>Get-Service "s*" | Sort-Object status -Descending

    Status   Name               DisplayName
    ------   ----               -----------
    Running  ShellHWDetection   Shell Hardware Detection
    Running  SharedAccess       Windows Firewall/Internet Connectio...
    Running  Spooler            Print Spooler
    Running  SSDPSRV            SSDP Discovery Service
    Running  srservice          System Restore Service
    Running  SCardSvr           Smart Card
    Running  SamSs              Security Accounts Manager
    Running  Schedule           Task Scheduler
    Running  SENS               System Event Notification
    Running  seclogon           Secondary Logon
    Stopped  SysmonLog          Performance Logs and Alerts
    Stopped  SwPrv              MS Software Shadow Copy Provider
    Stopped  stisvc             Windows Image Acquisition (WIA)

    This command shows that when you sort services in ascending order by the value of their Status property, stopped services appear before running services. This happens because the value of Status is an enumeration, in which Stopped
    has a value of 1, and Running has a value of 4.

    To list running services first, use the Descending parameter of the Sort-Object cmdlet.
    Example 9: Get services on multiple computers

    PS C:\>Get-Service -Name "WinRM" -ComputerName "localhost", "Server01", "Server02" | Format-Table -Property MachineName, Status, Name, DisplayName -auto






    MachineName    Status  Name  DisplayName
    ------------   ------  ----  -----------
    localhost      Running WinRM Windows Remote Management (WS-Management)
    Server01       Running WinRM Windows Remote Management (WS-Management)
    Server02       Running WinRM Windows Remote Management (WS-Management)

    This command uses the Get-Service cmdlet to run a Get-Service Winrm command on two remote computers and the local computer ("localhost").

    The command runs on the remote computers, and the results are returned to the local computer. A pipeline operator (|) sends the results to the Format-Table cmdlet, which formats the services as a table. The Format-Table command
    uses the Property parameter to specify the properties displayed in the table, including the MachineName property.
    Example 10: Get the dependent services of a service

    PS C:\>Get-Service "WinRM" -RequiredServices

    This command gets the services that the WinRM service requires.

    The command returns the value of the ServicesDependedOn property of the service.
    Example 11: Get a service through the pipeline operator

    PS C:\>"WinRM" | Get-Service

    This command gets the WinRM service on the local computer. This example shows that you can pipe a service name string (enclosed in quotation marks) to Get-Service .

RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821593
    New-Service
    Restart-Service
    Resume-Service
    Set-Service
    Start-Service
    Stop-Service
    Suspend-Service



PS C:\Windows\system32> get-help get-service -online
PS C:\Windows\system32> get-service -Name "*spotify*"
PS C:\Windows\system32> get-service -Name "spotify*"
PS C:\Windows\system32> Get-Process -Name "*spotify*"

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
   1283      80    74976     104756       7.80  33824   1 Spotify
    575      50    84348      79780       0.88  37384   1 Spotify
    308      33    28176      20484       0.20  40564   1 Spotify
    675      61    33064      32680       1.11  42180   1 Spotify
    480      68    97112     117740       3.92  42200   1 Spotify


PS C:\Windows\system32> get-help get-service -ShowWindow
PS C:\Windows\system32> Get-Service "s*" | Sort-Object status -Descending

Status   Name               DisplayName
------   ----               -----------
Running  SSDPSRV            SSDP Discovery
Running  sshd               OpenSSH SSH Server
Running  Spooler            Print Spooler
Running  SgrmBroker         System Guard Runtime Monitor Broker
Running  ShellHWDetection   Shell Hardware Detection
Running  SstpSvc            Secure Socket Tunneling Protocol Se...
Running  SysMain            SysMain
Running  SystemEventsBroker System Events Broker
Running  StorSvc            Storage Service
Running  StateRepository    State Repository Service
Running  stisvc             Windows Image Acquisition (WIA)
Running  SecurityHealthS... Windows Security Service
Running  SamSs              Security Accounts Manager
Running  SENS               System Event Notification Service
Running  Schedule           Task Scheduler
Running  SDRSVC             Windows Backup
Running  seclogon           Secondary Logon
Running  SEMgrSvc           Payments and NFC/SE Manager
Stopped  SessionEnv         Remote Desktop Configuration
Stopped  SCPolicySvc        Smart Card Removal Policy
Stopped  SensrSvc           Sensor Monitoring Service
Stopped  ScDeviceEnum       Smart Card Device Enumeration Service
Stopped  SCardSvr           Smart Card
Stopped  SensorService      Sensor Service
Stopped  svsvc              Spot Verifier
Stopped  swprv              Microsoft Software Shadow Copy Prov...
Stopped  ssh-agent          OpenSSH Authentication Agent
Stopped  smphost            Microsoft Storage Spaces SMP
Stopped  SmsRouter          Microsoft Windows SMS Router Service.
Stopped  SharedRealitySvc   Spatial Data Service
Stopped  shpamsvc           Shared PC Account Manager
Stopped  SNMPTRAP           SNMP Trap
Stopped  sppsvc             Software Protection
Stopped  SensorDataService  Sensor Data Service
Stopped  spectrum           Windows Perception Service
Stopped  SharedAccess       Internet Connection Sharing (ICS)


PS C:\Windows\system32> get-help update-help -ShowWindow
PS C:\Windows\system32> get-help update-help -ShowWindow
PS C:\Windows\system32> get-help get-processes -ShowWindow
get-help : Get-Help could not find get-processes in a help file in this session. To download updated help topics type: 
"Update-Help". To get help online, search for the help topic in the TechNet library at 
https:/go.microsoft.com/fwlink/?LinkID=107116.
At line:1 char:1
+ get-help get-processes -ShowWindow
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (:) [Get-Help], HelpNotFoundException
    + FullyQualifiedErrorId : HelpNotFound,Microsoft.PowerShell.Commands.GetHelpCommand
get-help : Get-Help could not find get-processes in a help file in this session. To download updated help topics type: "Update-Help". To get help online, search for the help topic in the TechNet library at
https:/go.microsoft.com/fwlink/?LinkID=107116.
At line:1 char:1
+ get-help get-processes -ShowWindow
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (:) [Get-Help], HelpNotFoundException
    + FullyQualifiedErrorId : HelpNotFound,Microsoft.PowerShell.Commands.GetHelpCommand

PS C:\Windows\system32> get-help get-process -ShowWindow
PS C:\Windows\system32> Get-Process | Where-Object {$_.WorkingSet -gt 20000000}

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
    495      48    34048      33472       4.31  15176   1 ApplicationFrameHost
   6653      52    27304      23888      63.97  10000   1 ArmouryCrate.UserSessionHelper
    504      34    37916      29032       0.59  14568   1 AsusSoftwareManagerAgent
   2427     162   650400     371276   1,379.72   2204   0 bdservicehost
   1048      54    53240      66720      37.64   2904   0 bdservicehost
    848      49    41156      33568      25.20   2944   0 BdVpnService
   2400      76   153240     208700     618.02   2220   1 chrome
    180      15    13764      26516       0.20   4272   1 chrome
   1129      39   364892     331048     235.81   5532   1 chrome
    288      27    43924      81352       4.44   5688   1 chrome
    449      23    35880      45584     125.70   5968   1 chrome
    314      22    32224      45728       3.80  11332   1 chrome
    341      29    61424      87892      20.00  13532   1 chrome
    237      20    23088      39028       0.92  13652   1 chrome
    242      20    25288      35844       0.77  18032   1 chrome
    239      20    24216      42208     124.27  19828   1 chrome
    299      29    46548      70796       5.53  19844   1 chrome
    233      19    20464      31576       0.66  20312   1 chrome
    233      19    20660      34188       0.84  20928   1 chrome
    236      19    21408      33396       0.61  21252   1 chrome
    244      19    19100      34648       0.55  21616   1 chrome
    237      20    21908      35492       1.27  21860   1 chrome
    361      32    62684      93304       8.92  22188   1 chrome
    221      16    12704      20552       0.19  22608   1 chrome
    551      50   113620     136392       7.19  29036   1 chrome
    233      19    18476      30552       0.48  29412   1 chrome
    261      25    45268      67880       2.17  30440   1 chrome
    355      29    51924      78236       8.03  30984   1 chrome
    325      32    61036      84716       7.70  34624   1 chrome
    356      35    54280      76208       1.78  38844   1 chrome
    667      20    26804      30784      39.89   9320   1 ctfmon
   1355      53   126980     121248     876.69   1528   1 dwm
   4098     264   142824     235880     407.30   1788   1 explorer
    458      24     8956      23056       6.80   5356   1 FileCoAuth
   1499      30    11936      21272       9.67   9920   1 igfxEM
    538      24    24296      20880       4.45   5680   0 LightingService
    580      28    14668      45076       3.98   3376   1 LockApp
      0       0      492     174420      28.88   3464   0 Memory Compression
   1439      55    75436      65280       6.94   9636   1 Microsoft.Photos
    649      33   383908     135456       1.48  26888   0 mysqld
    562      25    28352      20516      19.72   3284   1 NVDisplay.Container
    799      30    41704      52960      10.81   5708   0 OfficeClickToRun
   1297      82    75536     107944      50.34   6700   1 OneDrive
    226      14    19236      25776       1.19  30400   1 plugin_host
    908      59   402064     425828      15.83  20584   1 powershell
      0      22    19084      49552       2.38    144   0 Registry
    384      29     7472      21988      12.16  10052   1 RuntimeBroker
    355      22     7192      21292       5.06  11508   1 RuntimeBroker
   1043      77    32828      57716      67.19  12068   1 RuntimeBroker
    382      24    10684      32040       1.16  17728   1 RuntimeBroker
    380      28     9544      24456       8.58  17800   1 RuntimeBroker
    281      17     4648      20504       0.05  23224   1 RuntimeBroker
    510      44    13660      39708       7.08  25456   1 RuntimeBroker
    470      24     6364      26560       0.83  30724   1 RuntimeBroker
    839     491    68720      73360     119.78  11752   0 SearchIndexer
   2383     128   172332     246440      96.47  11728   1 SearchUI
    756      32    25680      76368       2.17  30072   1 ShellExperienceHost
    856      48    16156      39112      43.97   9852   1 sihost
   1161     101   211972     187304      20.56  12908   1 SkypeApp
    645      31    55140      44208      23.19  14076   1 SkypeBridge
    529      38    21620      28628       5.78  13232   1 smartscreen
   1238      77    74212     104792       8.45  33824   1 Spotify
    564      49    84668      80428       0.91  37384   1 Spotify
    307      32    27892      20412       0.20  40564   1 Spotify
    587      52    31732      32132       1.13  42180   1 Spotify
    459      69   105112     123920      13.98  42200   1 Spotify
    772      34    47176      80376      17.50  10460   1 StartMenuExperienceHost
    857      43    35184      68680      36.09   1624   1 sublime_text
   1560      27    18672      27868      87.09   1156   0 svchost
    550      23    17116      26668      11.41   5212   0 svchost
    387      22    38212      40272      53.50   5324   0 svchost
    838      92    41980      51424      73.19   7792   0 svchost
    316      20     6620      20116       0.83   9756   0 svchost
    481      25    11064      22288      21.13   9888   1 svchost
    623      37    10392      34196      13.36   9940   1 svchost
    904      44    23628      55864       0.66  43088   1 SystemSettings
    480      31     9608      32224       0.97  36272   1 SystemSettingsBroker
    401      21    27128      33548       0.19  28088   1 SysTray
    322      62    37976      37232      20.75  13240   0 TiWorker
   1561     103   120332      99676       2.61  11916   1 WinStore.App
    650      35    39560      27972       2.08   5376   0 XtuService


PS C:\Windows\system32> get-help get-service -ShowWindow
PS C:\Windows\system32> get-process -id
>> TerminatingError(Get-Process): "Missing an argument for parameter 'Id'. Specify a parameter of type 'System.Int32[]' and try again."
Get-Process : Missing an argument for parameter 'Id'. Specify a parameter of type 'System.Int32[]' and try again.
At line:1 char:13
+ get-process -id
+             ~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetProcessCommand
Get-Process : Missing an argument for parameter 'Id'. Specify a parameter of type 'System.Int32[]' and try again.
At line:1 char:13
+ get-process -id
+             ~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetProcessCommand

PS C:\Windows\system32> get-process -name
>> TerminatingError(Get-Process): "Missing an argument for parameter 'Name'. Specify a parameter of type 'System.String[]' and try again."
Get-Process : Missing an argument for parameter 'Name'. Specify a parameter of type 'System.String[]' and try again.
At line:1 char:13
+ get-process -name
+             ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetProcessCommand
Get-Process : Missing an argument for parameter 'Name'. Specify a parameter of type 'System.String[]' and try again.
At line:1 char:13
+ get-process -name
+             ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetProcessCommand

PS C:\Windows\system32> get-help Get-Process

NAME
    Get-Process

SYNOPSIS
    Gets the processes that are running on the local computer or a remote computer.


SYNTAX
    Get-Process [[-Name] <String[]>] [-ComputerName <String[]>] [-FileVersionInfo] [-Module] [<CommonParameters>]

    Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -Id <Int32[]> [-Module] [<CommonParameters>]

    Get-Process [-ComputerName <String[]>] [-FileVersionInfo] -InputObject <Process[]> [-Module] [<CommonParameters>]

    Get-Process -Id <Int32[]> -IncludeUserName [<CommonParameters>]

    Get-Process [[-Name] <String[]>] -IncludeUserName [<CommonParameters>]

    Get-Process -IncludeUserName -InputObject <Process[]> [<CommonParameters>]


DESCRIPTION
    The Get-Process cmdlet gets the processes on a local or remote computer.

    Without parameters, this cmdlet gets all of the processes on the local computer. You can also specify a particular process by process name or process ID (PID) or pass a process object through the pipeline to this cmdlet.

    By default, this cmdlet returns a process object that has detailed information about the process and supports methods that let you start and stop the process. You can also use the parameters of the Get-Process cmdlet to get file
    version information for the program that runs in the process and to get the modules that the process loaded.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?linkid=821590
    Debug-Process
    Get-Process
    Start-Process
    Stop-Process
    Wait-Process

REMARKS
    To see the examples, type: "get-help Get-Process -examples".
    For more information, type: "get-help Get-Process -detailed".
    For technical information, type: "get-help Get-Process -full".
    For online help, type: "get-help Get-Process -online"


PS C:\Windows\system32> Get-Process | Measure


Count    : 257
Average  :
Sum      :
Maximum  :
Minimum  :
Property :



PS C:\Windows\system32> Get-Process 

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
    324      22    12532       8016       1.70  14388   1 ACMON
    502      49    26404      31608       4.48  15176   1 ApplicationFrameHost
    718      39    27180      13492       5.13   5424   0 ArmouryCrate.Service
   6849      52    27548      24132      66.27  10000   1 ArmouryCrate.UserSessionHelper
    226      15     3156       1040       0.22  10064   1 ASUS_FRQ_Control
    267      10     4916       6252      13.11   5292   0 AsusMultiAntennaSvc
    167      10     1988       4236       0.31   4468   0 AsusOptimization
    290      18     4452       4780       0.39   9700   1 AsusOptimizationStartupTask
    177      16     4032       5596       0.23  13736   1 AsusOSD
    407      15     7076       6264       1.52   5272   0 AsusSoftwareManager
    515      34    37984      29004       0.61  14568   1 AsusSoftwareManagerAgent
   1479      14     4044      11624       1.03   5228   0 AsusSystemAnalysis
    151       9     1740       6128       0.02   5384   0 AsusSystemDiagnosis
    182      14    11192      16920       0.59  22380   0 audiodg
    747      50    33368       8896       5.72  15516   1 bdagent
    225      13     4584       7060       0.81   9120   0 bdredline
   2446     193   679288     442704   1,387.64   2204   0 bdservicehost
   1052      55    53736      67476      39.00   2904   0 bdservicehost
    355      20     9828       8456      27.75   5316   0 bdservicehost
    376      30     8800      11436       2.61  12340   1 BdVpnApp
    838      46    40752      33100      25.97   2944   0 BdVpnService
    135       9     1868       2456       0.02  14436   1 browser_broker
    153      11     2136       1892       0.16   1728   1 chrome
   2486      78   162764     218820     641.39   2220   1 chrome
    180      15    13764      26516       0.22   4272   1 chrome
   1261      41   380792     346564     251.50   5532   1 chrome
    333      11     2192       3096       0.16   5556   1 chrome
    288      27    43924      81372       4.48   5688   1 chrome
    521      36    38116      46936     128.20   5968   1 chrome
    239      16     6620      15348       1.11   6564   1 chrome
    330      22    34228      48824       3.92  11332   1 chrome
    341      29    61424      88304      20.02  13532   1 chrome
    237      20    23088      39028       0.92  13652   1 chrome
    253      21    25148      36764       0.86  18032   1 chrome
>> TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS C:\Windows\system32> Get-Process -Name "*chrome*"

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
    153      11     2136       1892       0.16   1728   1 chrome
   2412      76   156088     212168     641.44   2220   1 chrome
    180      15    13764      26516       0.22   4272   1 chrome
   1239      39   373088     334756     251.50   5532   1 chrome
    326      11     2192       3096       0.16   5556   1 chrome
    288      27    43924      81372       4.48   5688   1 chrome
    498      33    38116      46936     128.30   5968   1 chrome
    242      16     6656      15368       1.11   6564   1 chrome
    324      22    34124      48752       3.92  11332   1 chrome
    341      29    61424      88316      20.02  13532   1 chrome
    237      20    23088      39028       0.92  13652   1 chrome
    250      20    25112      36744       0.86  18032   1 chrome
    244      20    24664      42884     124.31  19828   1 chrome
    300      28    46732      70188       5.55  19844   1 chrome
    233      19    20464      31576       0.67  20312   1 chrome
    233      19    20660      34188       0.88  20928   1 chrome
    236      19    21428      33496       0.64  21252   1 chrome
    244      19    19100      34648       0.56  21616   1 chrome
    237      20    21908      35492       1.27  21860   1 chrome
    348      32    61532      90472       9.17  22188   1 chrome
    551      50   113620     136392       7.19  29036   1 chrome
    233      19    18476      30552       0.50  29412   1 chrome
    261      25    45556      66916       2.36  30440   1 chrome
    355      29    51924      78276       8.06  30984   1 chrome
    325      32    62188      85640       8.25  34624   1 chrome
    355      32    52740      73272       2.08  38844   1 chrome
    221      16    12696      20540       0.08  48968   1 chrome


PS C:\Windows\system32> Get-Process -Name "*chrome*" | Measure


Count    : 27
Average  :
Sum      :
Maximum  :
Minimum  :
Property :



PS C:\Windows\system32> Get-Process -Name "*chrome*" | Measure > chrome.txt
PS C:\Windows\system32> ParameterBinding(Out-File): name="InputObject"; value="Microsoft.PowerShell.Commands.GenericMeasureInfo"
PS C:\Windows\system32> Get-Process -Name "*chrome*" | Measure > C:\Users\flame\Documents\Powershell\chrome2.txt
PS C:\Windows\system32> ParameterBinding(Out-File): name="InputObject"; value="Microsoft.PowerShell.Commands.GenericMeasureInfo"
PS C:\Windows\system32> get-service -Name bits

Status   Name               DisplayName
------   ----               -----------
Running  bits               Background Intelligent Transfer Ser...


PS C:\Windows\system32> get-service -Name *bits

Status   Name               DisplayName
------   ----               -----------
Running  BITS               Background Intelligent Transfer Ser...


PS C:\Windows\system32> get-service -Name bts, chrome
get-service : Cannot find any service with service name 'bts'.
At line:1 char:1
+ get-service -Name bts, chrome
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (bts:String) [Get-Service], ServiceCommandException
    + FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand
get-service : Cannot find any service with service name 'bts'.
At line:1 char:1
+ get-service -Name bts, chrome
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (bts:String) [Get-Service], ServiceCommandException
    + FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand

get-service : Cannot find any service with service name 'chrome'.
At line:1 char:1
+ get-service -Name bts, chrome
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (chrome:String) [Get-Service], ServiceCommandException
    + FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand
get-service : Cannot find any service with service name 'chrome'.
At line:1 char:1
+ get-service -Name bts, chrome
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (chrome:String) [Get-Service], ServiceCommandException
    + FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand

PS C:\Windows\system32> get-service -Name b*

Status   Name               DisplayName
------   ----               -----------
Stopped  BcastDVRUserSer... GameDVR and Broadcast User Service_...
Running  BDAuxSrv           Bitdefender Auxiliary Service
Stopped  BDESVC             BitLocker Drive Encryption Service
Running  BDProtSrv          Bitdefender Protected Service
Running  bdredline          Bitdefender RedLine Service
Running  BdVpnService       Bitdefender Vpn Service
Running  BFE                Base Filtering Engine
Running  BITS               Background Intelligent Transfer Ser...
Running  BluetoothUserSe... Bluetooth User Support Service_7fe97
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Stopped  Browser            Computer Browser
Running  BTAGService        Bluetooth Audio Gateway Service
Running  BthAvctpSvc        AVCTP service
Running  bthserv            Bluetooth Support Service


PS C:\Windows\system32> get-service -Name b*, c*

Status   Name               DisplayName
------   ----               -----------
Stopped  BcastDVRUserSer... GameDVR and Broadcast User Service_...
Running  BDAuxSrv           Bitdefender Auxiliary Service
Stopped  BDESVC             BitLocker Drive Encryption Service
Running  BDProtSrv          Bitdefender Protected Service
Running  bdredline          Bitdefender RedLine Service
Running  BdVpnService       Bitdefender Vpn Service
Running  BFE                Base Filtering Engine
Running  BITS               Background Intelligent Transfer Ser...
Running  BluetoothUserSe... Bluetooth User Support Service_7fe97
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Stopped  Browser            Computer Browser
Running  BTAGService        Bluetooth Audio Gateway Service
Running  BthAvctpSvc        AVCTP service
Running  bthserv            Bluetooth Support Service
Running  camsvc             Capability Access Manager Service
Stopped  CaptureService_... CaptureService_7fe97
Running  cbdhsvc_7fe97      Clipboard User Service_7fe97
Running  CDPSvc             Connected Devices Platform Service
Running  CDPUserSvc_7fe97   Connected Devices Platform User Ser...
Stopped  CertPropSvc        Certificate Propagation
Running  ClickToRunSvc      Microsoft Office Click-to-Run Service
Stopped  ClipSVC            Client License Service (ClipSVC)
Stopped  COMSysApp          COM+ System Application
Stopped  ConsentUxUserSv... ConsentUX_7fe97
Running  CoreMessagingRe... CoreMessaging
Running  cphs               Intel(R) Content Protection HECI Se...
Running  cplspcon           Intel(R) Content Protection HDCP Se...
Stopped  CredentialEnrol... CredentialEnrollmentManagerUserSvc_...
Running  CryptSvc           Cryptographic Services


PS C:\Windows\system32> get-service -DisplayName 
>> TerminatingError(Get-Service): "Missing an argument for parameter 'DisplayName'. Specify a parameter of type 'System.String[]' and try again."
Get-Service : Missing an argument for parameter 'DisplayName'. Specify a parameter of type 'System.String[]' and try 
again.
At line:1 char:13
+ get-service -DisplayName
+             ~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetServiceCommand
Get-Service : Missing an argument for parameter 'DisplayName'. Specify a parameter of type 'System.String[]' and try again.
At line:1 char:13
+ get-service -DisplayName
+             ~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetServiceCommand

PS C:\Windows\system32> get-service -name
>> TerminatingError(Get-Service): "Missing an argument for parameter 'Name'. Specify a parameter of type 'System.String[]' and try again."
Get-Service : Missing an argument for parameter 'Name'. Specify a parameter of type 'System.String[]' and try again.
At line:1 char:13
+ get-service -name
+             ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetServiceCommand
Get-Service : Missing an argument for parameter 'Name'. Specify a parameter of type 'System.String[]' and try again.
At line:1 char:13
+ get-service -name
+             ~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : MissingArgument,Microsoft.PowerShell.Commands.GetServiceCommand

PS C:\Windows\system32> get-service -name b*

Status   Name               DisplayName
------   ----               -----------
Stopped  BcastDVRUserSer... GameDVR and Broadcast User Service_...
Running  BDAuxSrv           Bitdefender Auxiliary Service
Stopped  BDESVC             BitLocker Drive Encryption Service
Running  BDProtSrv          Bitdefender Protected Service
Running  bdredline          Bitdefender RedLine Service
Running  BdVpnService       Bitdefender Vpn Service
Running  BFE                Base Filtering Engine
Running  BITS               Background Intelligent Transfer Ser...
Running  BluetoothUserSe... Bluetooth User Support Service_7fe97
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Stopped  Browser            Computer Browser
Running  BTAGService        Bluetooth Audio Gateway Service
Running  BthAvctpSvc        AVCTP service
Running  bthserv            Bluetooth Support Service


PS C:\Windows\system32> get-service -DisplayName  b*

Status   Name               DisplayName
------   ----               -----------
Running  BDAuxSrv           Bitdefender Auxiliary Service
Stopped  BDESVC             BitLocker Drive Encryption Service
Running  BDProtSrv          Bitdefender Protected Service
Running  bdredline          Bitdefender RedLine Service
Running  BdVpnService       Bitdefender Vpn Service
Running  BFE                Base Filtering Engine
Running  BITS               Background Intelligent Transfer Ser...
Running  BluetoothUserSe... Bluetooth User Support Service_7fe97
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Running  BTAGService        Bluetooth Audio Gateway Service
Running  bthserv            Bluetooth Support Service
Running  DevMgmtService     Bitdefender Device Management Service
Running  ProductAgentSer... Bitdefender Product Agent Service
Running  UPDATESRV          Bitdefender Desktop Update Service
Running  VSSERV             Bitdefender Virus Shield
Stopped  wbengine           Block Level Backup Engine Service


PS C:\Windows\system32> get-service -DisplayName  Bitdefender Auxilliary Serivce
>> TerminatingError(Get-Service): "A positional parameter cannot be found that accepts argument 'Auxilliary'."
Get-Service : A positional parameter cannot be found that accepts argument 'Auxilliary'.
At line:1 char:1
+ get-service -DisplayName  Bitdefender Auxilliary Serivce
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetServiceCommand
Get-Service : A positional parameter cannot be found that accepts argument 'Auxilliary'.
At line:1 char:1
+ get-service -DisplayName  Bitdefender Auxilliary Serivce
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetServiceCommand

PS C:\Windows\system32> get-service -DisplayName  Bitdefender Auxiliary Serivce
>> TerminatingError(Get-Service): "A positional parameter cannot be found that accepts argument 'Auxiliary'."
Get-Service : A positional parameter cannot be found that accepts argument 'Auxiliary'.
At line:1 char:1
+ get-service -DisplayName  Bitdefender Auxiliary Serivce
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetServiceCommand
Get-Service : A positional parameter cannot be found that accepts argument 'Auxiliary'.
At line:1 char:1
+ get-service -DisplayName  Bitdefender Auxiliary Serivce
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Service], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetServiceCommand

PS C:\Windows\system32> get-service -DisplayName  Bit*

Status   Name               DisplayName
------   ----               -----------
Running  BDAuxSrv           Bitdefender Auxiliary Service
Stopped  BDESVC             BitLocker Drive Encryption Service
Running  BDProtSrv          Bitdefender Protected Service
Running  bdredline          Bitdefender RedLine Service
Running  BdVpnService       Bitdefender Vpn Service
Running  DevMgmtService     Bitdefender Device Management Service
Running  ProductAgentSer... Bitdefender Product Agent Service
Running  UPDATESRV          Bitdefender Desktop Update Service
Running  VSSERV             Bitdefender Virus Shield


PS C:\Windows\system32> Get-Service vss

Status   Name               DisplayName
------   ----               -----------
Stopped  vss                Volume Shadow Copy


PS C:\Windows\system32> Get-Service gsv
Get-Service : Cannot find any service with service name 'gsv'.
At line:1 char:1
+ Get-Service gsv
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (gsv:String) [Get-Service], ServiceCommandException
    + FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand
Get-Service : Cannot find any service with service name 'gsv'.
At line:1 char:1
+ Get-Service gsv
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (gsv:String) [Get-Service], ServiceCommandException
    + FullyQualifiedErrorId : NoServiceFoundForGivenName,Microsoft.PowerShell.Commands.GetServiceCommand

PS C:\Windows\system32> gsv bits

Status   Name               DisplayName
------   ----               -----------
Running  bits               Background Intelligent Transfer Ser...


PS C:\Windows\system32> alias gsv

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           gsv -> Get-Service


PS C:\Windows\system32> $pz_service = get-service 
PS C:\Windows\system32> $pz_service -Name bits
At line:1 char:13
+ $pz_service -Name bits
+             ~~~~~
Unexpected token '-Name' in expression or statement.

At line:1 char:19
+ $pz_service -Name bits
+                   ~~~~
Unexpected token 'bits' in expression or statement.
At line:1 char:13
+ $pz_service -Name bits
+             ~~~~~
Unexpected token '-Name' in expression or statement.

At line:1 char:19
+ $pz_service -Name bits
+                   ~~~~
Unexpected token 'bits' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Windows\system32> $pz_service bits
At line:1 char:13
+ $pz_service bits
+             ~~~~
Unexpected token 'bits' in expression or statement.
At line:1 char:13
+ $pz_service bits
+             ~~~~
Unexpected token 'bits' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Windows\system32> $pz_service 

Status   Name               DisplayName
------   ----               -----------
Stopped  AarSvc_7fe97       Agent Activation Runtime_7fe97
Stopped  AfVpnService       AfVpnService
Stopped  AJRouter           AllJoyn Router Service
Stopped  ALG                Application Layer Gateway Service
Stopped  AppIDSvc           Application Identity
Running  Appinfo            Application Information
Stopped  AppReadiness       App Readiness
Running  AppXSvc            AppX Deployment Service (AppXSVC)
Running  ArmouryCrateSer... ARMOURY CRATE Service
Stopped  asus               ASUS Update Service (asus)
Stopped  asusm              ASUS Update Service (asusm)
Running  AsusMultiAntenn... ASUS MultiAntenna Service
Running  ASUSOptimization   ASUS Optimization
Running  ASUSSoftwareMan... ASUS Software Manager
Running  ASUSSystemAnalysis ASUS System Analysis
Running  ASUSSystemDiagn... ASUS System Diagnosis
Running  AudioEndpointBu... Windows Audio Endpoint Builder
Running  Audiosrv           Windows Audio
Stopped  autotimesvc        Cellular Time
Stopped  AxInstSV           ActiveX Installer (AxInstSV)
Stopped  BcastDVRUserSer... GameDVR and Broadcast User Service_...
Running  BDAuxSrv           Bitdefender Auxiliary Service
Stopped  BDESVC             BitLocker Drive Encryption Service
Running  BDProtSrv          Bitdefender Protected Service
Running  bdredline          Bitdefender RedLine Service
Running  BdVpnService       Bitdefender Vpn Service
Running  BFE                Base Filtering Engine
Running  BITS               Background Intelligent Transfer Ser...
Running  BluetoothUserSe... Bluetooth User Support Service_7fe97
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...
Stopped  Browser            Computer Browser
Running  BTAGService        Bluetooth Audio Gateway Service
Running  BthAvctpSvc        AVCTP service
Running  bthserv            Bluetooth Support Service
Running  camsvc             Capability Access Manager Service
Stopped  CaptureService_... CaptureService_7fe97
Running  cbdhsvc_7fe97      Clipboard User Service_7fe97
Running  CDPSvc             Connected Devices Platform Service
Running  CDPUserSvc_7fe97   Connected Devices Platform User Ser...
Stopped  CertPropSvc        Certificate Propagation
Running  ClickToRunSvc      Microsoft Office Click-to-Run Service
Running  ClipSVC            Client License Service (ClipSVC)
Stopped  COMSysApp          COM+ System Application
Stopped  ConsentUxUserSv... ConsentUX_7fe97
Running  CoreMessagingRe... CoreMessaging
Running  cphs               Intel(R) Content Protection HECI Se...
Running  cplspcon           Intel(R) Content Protection HDCP Se...
Stopped  CredentialEnrol... CredentialEnrollmentManagerUserSvc_...
Running  CryptSvc           Cryptographic Services
Running  DcomLaunch         DCOM Server Process Launcher
Stopped  defragsvc          Optimize drives
Stopped  DeviceAssociati... DeviceAssociationBroker_7fe97
Running  DeviceAssociati... Device Association Service
Stopped  DeviceInstall      Device Install Service
Stopped  DevicePickerUse... DevicePicker_7fe97
Running  DevicesFlowUser... DevicesFlow_7fe97
Running  DevMgmtService     Bitdefender Device Management Service
Stopped  DevQueryBroker     DevQuery Background Discovery Broker
Running  Dhcp               DHCP Client
Stopped  diagnosticshub.... Microsoft (R) Diagnostics Hub Stand...
Stopped  diagsvc            Diagnostic Execution Service
Running  DiagTrack          Connected User Experiences and Tele...
Running  DispBrokerDeskt... Display Policy Service
Running  DisplayEnhancem... Display Enhancement Service
Stopped  DmEnrollmentSvc    Device Management Enrollment Service
Stopped  dmwappushservice   Device Management Wireless Applicat...
Running  Dnscache           DNS Client
Running  DoSvc              Delivery Optimization
Stopped  dot3svc            Wired AutoConfig
Running  DPS                Diagnostic Policy Service
Stopped  DsmSvc             Device Setup Manager
Running  DsSvc              Data Sharing Service
Running  DusmSvc            Data Usage
Stopped  Eaphost            Extensible Authentication Protocol
Stopped  EFS                Encrypting File System (EFS)
Stopped  embeddedmode       Embedded Mode
Stopped  EntAppSvc          Enterprise App Management Service
Running  esifsvc            Intel(R) Dynamic Platform and Therm...
Running  EventLog           Windows Event Log
Running  EventSystem        COM+ Event System
Running  EvtEng             Intel(R) PROSet/Wireless Event Log
Stopped  Fax                Fax
Stopped  fdPHost            Function Discovery Provider Host
Stopped  FDResPub           Function Discovery Resource Publica...
Stopped  fhsvc              File History Service
Running  FontCache          Windows Font Cache Service
Stopped  FrameServer        Windows Camera Frame Server
Stopped  GoogleChromeEle... Google Chrome Elevation Service
Stopped  gpsvc              Group Policy Client
Stopped  GraphicsPerfSvc    GraphicsPerfSvc
Stopped  gupdate            Google Update Service (gupdate)
Stopped  gupdatem           Google Update Service (gupdatem)
Stopped  HfcDisableService  Intel(R) RST HFC Disable Service
Running  hidserv            Human Interface Device Service
Stopped  HvHost             HV Host Service
Stopped  iaStorAfsService   Intel(R) Optane(TM) Memory Service
Running  ibtsiva            Intel Bluetooth Service
Stopped  icssvc             Windows Mobile Hotspot Service
Running  igfxCUIService2... Intel(R) HD Graphics Control Panel ...
Running  IKEEXT             IKE and AuthIP IPsec Keying Modules
Running  InstallService     Microsoft Store Install Service
Stopped  Intel(R) Capabi... Intel(R) Capability Licensing Servi...
Stopped  Intel(R) TPM Pr... Intel(R) TPM Provisioning Service
Running  iphlpsvc           IP Helper
Stopped  IpxlatCfgSvc       IP Translation Configuration Service
Running  jhi_service        Intel(R) Dynamic Application Loader...
Running  KeyIso             CNG Key Isolation
Stopped  KtmRm              KtmRm for Distributed Transaction C...
Running  LanmanServer       Server
Running  LanmanWorkstation  Workstation
Running  lfsvc              Geolocation Service
Running  LicenseManager     Windows License Manager Service
Running  LightingService    LightingService
Stopped  lltdsvc            Link-Layer Topology Discovery Mapper
Running  lmhosts            TCP/IP NetBIOS Helper
Running  LSM                Local Session Manager
Stopped  LxpSvc             Language Experience Service
Stopped  MapsBroker         Downloaded Maps Manager
Stopped  MessagingServic... MessagingService_7fe97
Running  mpssvc             Windows Defender Firewall
Stopped  MSDTC              Distributed Transaction Coordinator
Stopped  MSiSCSI            Microsoft iSCSI Initiator Service
Stopped  msiserver          Windows Installer
Stopped  MyWiFiDHCPDNS      Wireless PAN DHCP Server
Running  NahimicService     Nahimic service
Stopped  NaturalAuthenti... Natural Authentication
Stopped  NcaSvc             Network Connectivity Assistant
Running  NcbService         Network Connection Broker
Stopped  NcdAutoSetup       Network Connected Devices Auto-Setup
Stopped  Netlogon           Netlogon
Stopped  Netman             Network Connections
Running  netprofm           Network List Service
Stopped  NetSetupSvc        Network Setup Service
Stopped  NetTcpPortSharing  Net.Tcp Port Sharing Service
Running  NgcCtnrSvc         Microsoft Passport Container
Running  NgcSvc             Microsoft Passport
Running  NlaSvc             Network Location Awareness
Running  nsi                Network Store Interface Service
Stopped  NvContainerLoca... NVIDIA LocalSystem Container
>> TerminatingError(): "The pipeline has been stopped."
PS C:\Windows\system32> $pz_service | measure


Count    : 290
Average  :
Sum      :
Maximum  :
Minimum  :
Property :



PS C:\Windows\system32> $pz_service -DisplayName *b*
At line:1 char:13
+ $pz_service -DisplayName *b*
+             ~~~~~~~~~~~~
Unexpected token '-DisplayName' in expression or statement.

At line:1 char:26
+ $pz_service -DisplayName *b*
+                          ~~~
Unexpected token '*b*' in expression or statement.
At line:1 char:13
+ $pz_service -DisplayName *b*
+             ~~~~~~~~~~~~
Unexpected token '-DisplayName' in expression or statement.

At line:1 char:26
+ $pz_service -DisplayName *b*
+                          ~~~
Unexpected token '*b*' in expression or statement.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : UnexpectedToken

PS C:\Windows\system32> Get-Service -Name BluetoothUserService_7fe97

Status   Name               DisplayName
------   ----               -----------
Running  BluetoothUserSe... Bluetooth User Support Service_7fe97


PS C:\Windows\system32> get-help *event log
>> TerminatingError(Get-Help): "A positional parameter cannot be found that accepts argument 'log'."
Get-Help : A positional parameter cannot be found that accepts argument 'log'.
At line:1 char:1
+ get-help *event log
+ ~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Help], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetHelpCommand
Get-Help : A positional parameter cannot be found that accepts argument 'log'.
At line:1 char:1
+ get-help *event log
+ ~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Help], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetHelpCommand

PS C:\Windows\system32> get-help *event log*
>> TerminatingError(Get-Help): "A positional parameter cannot be found that accepts argument 'log*'."
Get-Help : A positional parameter cannot be found that accepts argument 'log*'.
At line:1 char:1
+ get-help *event log*
+ ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Help], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetHelpCommand
Get-Help : A positional parameter cannot be found that accepts argument 'log*'.
At line:1 char:1
+ get-help *event log*
+ ~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Help], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetHelpCommand

PS C:\Windows\system32> get-help *eventlog*

Name                              Category  Module                    Synopsis
----                              --------  ------                    --------
Clear-EventLog                    Cmdlet    Microsoft.PowerShell.M... Clears all entries from specified event logs on the local or remote computers.
Get-EventLog                      Cmdlet    Microsoft.PowerShell.M... Gets the events in an event log, or a list of the event logs, on the local or remote computers.
Limit-EventLog                    Cmdlet    Microsoft.PowerShell.M... Sets the event log properties that limit the size of the event log and the age of its entries.
New-EventLog                      Cmdlet    Microsoft.PowerShell.M... Creates a new event log and a new event source on a local or remote computer.
Remove-EventLog                   Cmdlet    Microsoft.PowerShell.M... Deletes an event log or unregisters an event source.
Show-EventLog                     Cmdlet    Microsoft.PowerShell.M... Displays the event logs of the local or a remote computer in Event Viewer.
Write-EventLog                    Cmdlet    Microsoft.PowerShell.M... Writes an event to an event log.
about_Eventlogs                   HelpFile                            Windows PowerShell creates a Windows event log that is


PS C:\Windows\system32> get-help Get-EventLog 

NAME
    Get-EventLog

SYNOPSIS
    Gets the events in an event log, or a list of the event logs, on the local or remote computers.


SYNTAX
    Get-EventLog [-LogName] <String> [[-InstanceId] <Int64[]>] [-After <DateTime>] [-AsBaseObject] [-Before <DateTime>] [-ComputerName <String[]>] [-EntryType {Error | Information | FailureAudit | SuccessAudit | Warning}] [-Index
    <Int32[]>] [-Message <String>] [-Newest <Int32>] [-Source <String[]>] [-UserName <String[]>] [<CommonParameters>]

    Get-EventLog [-AsString] [-ComputerName <String[]>] [-List] [<CommonParameters>]


DESCRIPTION
    The Get-EventLog cmdlet gets events and event logs on the local and remote computers.

    You can use the parameters of this cmdlet to search for events by using their property values. This cmdlet gets only the events that match all of the specified property values.

    The cmdlets that contain the EventLog noun work only on classic event logs. To get events from logs that use the Windows Event Log technology in Windows Vista and later versions of Windows, use Get-WinEvent.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/?LinkId=821585
    Clear-EventLog
    Limit-EventLog
    New-EventLog
    Remove-EventLog
    Show-EventLog
    Write-EventLog

REMARKS
    To see the examples, type: "get-help Get-EventLog -examples".
    For more information, type: "get-help Get-EventLog -detailed".
    For technical information, type: "get-help Get-EventLog -full".
    For online help, type: "get-help Get-EventLog -online"


PS C:\Windows\system32> get-help Get-EventLog -showwindows
>> TerminatingError(Get-Help): "A parameter cannot be found that matches parameter name 'showwindows'."
Get-Help : A parameter cannot be found that matches parameter name 'showwindows'.
At line:1 char:23
+ get-help Get-EventLog -showwindows
+                       ~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Help], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.GetHelpCommand
Get-Help : A parameter cannot be found that matches parameter name 'showwindows'.
At line:1 char:23
+ get-help Get-EventLog -showwindows
+                       ~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Help], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.GetHelpCommand

PS C:\Windows\system32> get-help Get-EventLog -ShowWindow
PS C:\Windows\system32> Get-EventLog -LogName System -Newest 3

   Index Time          EntryType   Source                 InstanceID Message
   ----- ----          ---------   ------                 ---------- -------
    5444 Dec 02 14:00  Warning     DCOM                        10016 The description for Event ID '10016' in Source 'DCOM' cannot be found.  The local computer may not have the necessary registry information or message DLL files to d...
    5443 Dec 02 13:43  Warning     DCOM                        10016 The description for Event ID '10016' in Source 'DCOM' cannot be found.  The local computer may not have the necessary registry information or message DLL files to d...
    5442 Dec 02 13:43  Information Microsoft-Windows...            1 The system has returned from a low power state....


PS C:\Windows\system32> about_EventLogs
about_EventLogs : The term 'about_EventLogs' is not recognized as the name of a cmdlet, function, script file, or 
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try 
again.
At line:1 char:1
+ about_EventLogs
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (about_EventLogs:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
about_EventLogs : The term 'about_EventLogs' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try
again.
At line:1 char:1
+ about_EventLogs
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (about_EventLogs:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Windows\system32> get-help about_Eventlogs
TOPIC
    about_EventLogs

SHORT DESCRIPTION
    Windows PowerShell creates a Windows event log that is 
    named "Windows PowerShell" to record Windows PowerShell events. You can
    view this log in Event Viewer or by using cmdlets that get events, such as
    the Get-EventLog cmdlet. By default, Windows PowerShell engine and provider
    events are recorded in the event log, but you can use the event log 
    preference variables to customize the event log. For example, you can add
    events about Windows PowerShell commands.


LONG DESCRIPTION
    The Windows PowerShell event log records details of Windows PowerShell 
    operations, such as starting and stopping the program engine and starting
    and stopping the Windows PowerShell providers. You can also log details 
    about Windows PowerShell commands.


    The Windows PowerShell event log is in the Application and Services Logs
    group. The Windows PowerShell log is a classic event log that does not use
    the Windows Eventing technology. To view the log, use the cmdlets designed
    for classic event logs, such as Get-EventLog.


  Viewing the Windows PowerShell Event Log

      You can view the Windows PowerShell event log in Event Viewer or by 
      using the Get-EventLog and Get-WmiObject cmdlets. To view the contents 
      of the Windows PowerShell log, type:

  Get-EventLog -LogName "Windows PowerShell"

   
      To examine the events and their properties, use the Sort-Object cmdlet,
      the Group-Object cmdlet, and the cmdlets that contain the Format verb 
      (the Format cmdlets).


      For example, to view the events in the log grouped by the event ID, type:

  Get-EventLog "Windows PowerShell" | Format-Table -GroupBy EventID


      Or, type:

  Get-EventLog "Windows PowerShell" | Sort-Object EventID `
            | Group-Object EventID


      To view all the classic event logs, type:

  Get-EventLog -List

    
      You can also use the Get-WmiObject cmdlet to use the event-related 
      Windows Management Instumentation (WMI) classes to examine the event log.
      For example, to view all the properties of the event log file, type:

  Get-WmiObject Win32_NTEventLogFile | where `
            {$_.LogFileName -eq "Windows PowerShell"} | Format-List -Property * 


      To find the Win32 event-related WMI classes, type:

Get-WmiObject -List | where {$_.Name -like "win32*event*"}


      For more information, type "Get-Help Get-EventLog" and 
      "Get-Help Get-WmiObject".


  Selecting Events for the Windows PowerShell Event Log

      You can use the event log preference variables to determine which events
      are recorded in the Windows PowerShell event log. 


      There are six event log preference variables; two variables for each of 
      the three logging components: the engine (the Windows PowerShell 
      program), the providers, and the commands. The LifeCycleEvent variables
      log normal starting and stopping events. The Health variables log error
      events.


      The following table lists the event log preference variables.

          Variable                     Description
          --------------------------   ----------------------------------------

  $LogEngineLifeCycleEvent     Logs starting and stopping of
                                       Windows PowerShell.

  $LogEngineHealthEvent        Logs Windows PowerShell program errors.

  $LogProviderLifeCycleEvent   Logs starting and stopping of 
                                       Windows PowerShell providers.

  $LogProviderHealthEvent      Logs Windows PowerShell provider errors.

  $LogCommandLifeCycleEvent    Logs starting and completion of commands.

  $LogCommandHealthEvent       Logs command errors.


      (For information about Windows PowerShell providers, 
      type: "Get-Help about_providers".)


      By default, only the following event types are enabled:

  $LogEngineLifeCycleEvent
  $LogEngineHealthEvent
  $LogProviderLifeCycleEvent
  $LogProviderHealthEvent


      To enable an event type, set the preference variable for that event type
      to $true. For example, to enable command life-cycle events, type:

  $LogCommandLifeCycleEvent


      Or, type:

  $LogCommandLifeCycleEvent = $true


      To disable an event type, set the preference variable for that event type
      to $false. For example, to disable command life-cycle events, type:

  $LogProviderLifeCycleEvent = $false

      You can disable any event, except for the events that indicate that the
      Windows PowerShell engine and the core providers are started. These events
      are generated before the Windows PowerShell profiles are run and before 
      the host program is ready to accept commands.
    
      The variable settings apply only for the current Windows PowerShell 
      session. To apply them to all Windows PowerShell sessions, add them to
      your Windows PowerShell profile.


  Logging Module Events

    Beginning in Windows PowerShell 3.0, you can record execution events for the cmdlets
    and functions in Windows PowerShell modules and snap-ins by setting the
    LogPipelineExecutionDetails property of modules and snap-ins to TRUE. In Windows 
    PowerShell 2.0, this feature is available only for snap-ins.

    When the LogPipelineExecutionDetails property value is TRUE ($True), Windows PowerShell 
    writes cmdlet and function execution events in the session to the Windows PowerShell
    log in Event Viewer. The setting is effective only in the current session.

    To enable logging of execution events of cmdlets and functions in a module, use the
    following command sequence.
        Import-Module <ModuleName>
        $m = Get-Module <ModuleName>
        $m.LogPipelineExecutionDetails = $True

    To enable logging of execution events of cmdlets in a snap-in, use the following
    command sequence.
        $m = Get-PSSnapin <SnapInName> [-Registered]
        $m.LogPipelineExecutionDetails = $True

    To disable logging, use the same command sequence to set the property
    value to FALSE ($False).

    You can also use the "Turn on Module Logging" Group Policy setting to enable
    and disable module and snap-in logging. The policy value includes a list of 
    module and snap-in names. Wildcards are supported.

    When "Turn on Module Logging" is set for a module, the value of the 
    LogPipelineExecutionDetails property of the module is TRUE in all sessions 
    and it cannot be changed.

    The Turn On Module Logging group policy setting is located in the following
    Group Policy paths:

        Computer Configuration\Administrative Templates\Windows Components\Windows PowerShell
        User Configuration\Administrative Templates\Windows Components\Windows PowerShell

    The User Configuration policy takes precedence over the Computer Configuration policy,
    and both policies take preference over the value of the LogPipelineExecutionDetails 
    property of modules and snap-ins.

    For more information about this Group Policy setting, see about_Group_Policy_Settings
    (http://go.microsoft.com/fwlink/?LinkID=251696).


  Security and Auditing

      The Windows PowerShell event log is designed to indicate activity and 
      to provide operational details for troubleshooting. 


      However, like most Windows-based application event logs, the 
      Windows PowerShell event log is not designed to be secure. It should not
      be used to audit security or to record confidential or proprietary 
      information.


      Event logs are designed to be read and understood by users. Users can 
      read from and write to the log. A malicious user could read an event log
      on a local or remote computer, record false data, and then prevent the
      logging of their activities.


NOTES
    Authors of module authors can add logging features to
    their modules. For more information, see "Writing a Windows PowerShell Module" in
    MSDN at http://go.microsoft.com/fwlink/?LinkID=144916.


SEE ALSO
    Get-EventLog
    Get-WmiObject
    about_Group_Policy_Settings
    about_Preference_Variables
PS C:\Windows\system32> get-help -Name *permissions*

Name                              Category  Module                    Synopsis
----                              --------  ------                    --------
Get-PSSession                     Cmdlet    Microsoft.PowerShell.Core Gets the Windows PowerShell sessions on local and remote computers.
New-PSSessionConfigurationFile    Cmdlet    Microsoft.PowerShell.Core Creates a file that defines a session configuration.
Receive-PSSession                 Cmdlet    Microsoft.PowerShell.Core Gets results of commands in disconnected sessions.
Register-PSSessionConfiguration   Cmdlet    Microsoft.PowerShell.Core Creates and registers a new session configuration.
Set-PSSessionConfiguration        Cmdlet    Microsoft.PowerShell.Core Changes the properties of a registered session configuration.
Disable-PSRemoting                Cmdlet    Microsoft.PowerShell.Core Prevents remote users from running commands on the local computer.
Format-Wide                       Cmdlet    Microsoft.PowerShell.U... Formats objects as a wide table that displays only one property of each object.
Set-Variable                      Cmdlet    Microsoft.PowerShell.U... Sets the value of a variable. Creates the variable if one with the requested name does not exist.
Remove-WmiObject                  Cmdlet    Microsoft.PowerShell.M... Deletes an instance of an existing Windows Management Instrumentation (WMI) class.
Restart-Service                   Cmdlet    Microsoft.PowerShell.M... Stops and then starts one or more services.
Resume-Service                    Cmdlet    Microsoft.PowerShell.M... Resumes one or more suspended (paused) services.
Set-Service                       Cmdlet    Microsoft.PowerShell.M... Starts, stops, and suspends a service, and changes its properties.
Set-WmiInstance                   Cmdlet    Microsoft.PowerShell.M... Creates or updates an instance of an existing Windows Management Instrumentation (WMI) class.
Start-Process                     Cmdlet    Microsoft.PowerShell.M... Starts one or more processes on the local computer.
Start-Service                     Cmdlet    Microsoft.PowerShell.M... Starts one or more stopped services.
Stop-Service                      Cmdlet    Microsoft.PowerShell.M... Stops one or more running services.
Suspend-Service                   Cmdlet    Microsoft.PowerShell.M... Suspends (pauses) one or more running services.
Get-Acl                           Cmdlet    Microsoft.PowerShell.S... Gets the security descriptor for a resource, such as a file or registry key.
about_CommonParameters            HelpFile                            Describes the parameters that can be used with any cmdlet.
about_Preference_Variables        HelpFile                            Variables that customize the behavior of Windows PowerShell
about_Remote_FAQ                  HelpFile                            Contains questions and answers about running remote commands
about_Remote_Requirements         HelpFile                            Describes the system requirements and configuration requirements for
about_Remote_Troubleshooting      HelpFile                            Describes how to troubleshoot remote operations in Windows PowerShell.
about_Scheduled_Jobs_Troublesh... HelpFile                            Explains how to resolve problems with scheduled jobs
about_Session_Configurations      HelpFile                            Describes session configurations, which determine the users who can
about_Updatable_Help              HelpFile                            Describes the updatable help system in Windows PowerShell.
about_WMI_Cmdlets                 HelpFile                            Provides background information about Windows Management Instrumentation
about_Scheduled_Jobs_Troublesh... HelpFile                            Explains how to resolve problems with scheduled jobs


PS C:\Windows\system32> get-help -Name *gtx*
PS C:\Windows\system32> get-help -Name *nvidia*
PS C:\Windows\system32> Get-Process -Name *nvidia*
PS C:\Windows\system32> Get-Process -name *chrome*

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
    153      11     2136       1892       0.16   1728   1 chrome
   2488      77   165732     218552     679.56   2220   1 chrome
    180      15    13764      26516       0.22   4272   1 chrome
   1261      41   365816     306860     273.02   5532   1 chrome
    333      11     2160       3080       0.16   5556   1 chrome
    288      27    43924      81412       4.55   5688   1 chrome
    451      23    38996      47720     137.22   5968   1 chrome
    239      16     6620      15352       1.13   6564   1 chrome
    323      22    34576      46928       4.83  11332   1 chrome
    341      29    61424      88104      20.05  13532   1 chrome
    237      20    23088      39028       0.92  13652   1 chrome
    242      20    23772      36228       1.22  18032   1 chrome
    252      22    26344      44860     124.41  19828   1 chrome
    300      28    46732      70808       5.55  19844   1 chrome
    233      19    20464      31576       0.67  20312   1 chrome
    233      19    20660      34188       0.89  20928   1 chrome
    236      19    21856      33580       1.00  21252   1 chrome
    244      19    19100      34648       0.59  21616   1 chrome
    237      20    22416      35680       1.48  21860   1 chrome
    343      32    60216      90024       9.25  22188   1 chrome
    551      50   113620     136388       7.22  29036   1 chrome
    233      19    18476      30552       0.53  29412   1 chrome
    261      25    42132      62996       2.41  30440   1 chrome
    355      29    51924      78344       8.09  30984   1 chrome
    325      32    62116      86044       8.38  34624   1 chrome
    355      32    53284      73476       2.20  38844   1 chrome
    444     107   236160     259892      32.23  45052   1 chrome
    221      16    12652      20484       0.06  48688   1 chrome


PS C:\Windows\system32> Get-Process -name *system*

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName
-------  ------    -----      -----     ------     --  -- -----------
   1479      14     4044      11624       1.03   5228   0 AsusSystemAnalysis
    151       9     1740       6128       0.02   5384   0 AsusSystemDiagnosis
   6302       0      216       9096   1,552.25      4   0 System
   1280      57    63516      79692       7.53  43088   1 SystemSettings
    214      16     4604       5616       0.02  10428   1 SystemSettingsAdminFlows
    486      32    10180      32872       1.61  36272   1 SystemSettingsBroker


PS C:\Windows\system32> get-help -Category Alias

Name                              Category  Module                    Synopsis
----                              --------  ------                    --------
foreach                           Alias                               ForEach-Object
%                                 Alias                               ForEach-Object
where                             Alias                               Where-Object
?                                 Alias                               Where-Object
ac                                Alias                               Add-Content
clc                               Alias                               Clear-Content
cli                               Alias                               Clear-Item
clp                               Alias                               Clear-ItemProperty
clv                               Alias                               Clear-Variable
compare                           Alias                               Compare-Object
cpi                               Alias                               Copy-Item
cpp                               Alias                               Copy-ItemProperty
cvpa                              Alias                               Convert-Path
dbp                               Alias                               Disable-PSBreakpoint
diff                              Alias                               Compare-Object
ebp                               Alias                               Enable-PSBreakpoint
epal                              Alias                               Export-Alias
epcsv                             Alias                               Export-Csv
fc                                Alias                               Format-Custom
fl                                Alias                               Format-List
ft                                Alias                               Format-Table
fw                                Alias                               Format-Wide
gal                               Alias                               Get-Alias
gbp                               Alias                               Get-PSBreakpoint
gc                                Alias                               Get-Content
gci                               Alias                               Get-ChildItem
gcm                               Alias                               Get-Command
gdr                               Alias                               Get-PSDrive
gcs                               Alias                               Get-PSCallStack
ghy                               Alias                               Get-History
gi                                Alias                               Get-Item
gl                                Alias                               Get-Location
gm                                Alias                               Get-Member
gmo                               Alias                               Get-Module
gp                                Alias                               Get-ItemProperty
gpv                               Alias                               Get-ItemPropertyValue
gps                               Alias                               Get-Process
group                             Alias                               Group-Object
gsv                               Alias                               Get-Service
gu                                Alias                               Get-Unique
gv                                Alias                               Get-Variable
iex                               Alias                               Invoke-Expression
ihy                               Alias                               Invoke-History
ii                                Alias                               Invoke-Item
ipmo                              Alias                               Import-Module
ipal                              Alias                               Import-Alias
ipcsv                             Alias                               Import-Csv
measure                           Alias                               Measure-Object
mi                                Alias                               Move-Item
mp                                Alias                               Move-ItemProperty
nal                               Alias                               New-Alias
ndr                               Alias                               New-PSDrive
ni                                Alias                               New-Item
nv                                Alias                               New-Variable
nmo                               Alias                               New-Module
oh                                Alias                               Out-Host
rbp                               Alias                               Remove-PSBreakpoint
rdr                               Alias                               Remove-PSDrive
ri                                Alias                               Remove-Item
rni                               Alias                               Rename-Item
rnp                               Alias                               Rename-ItemProperty
rp                                Alias                               Remove-ItemProperty
rmo                               Alias                               Remove-Module
rv                                Alias                               Remove-Variable
rvpa                              Alias                               Resolve-Path
sal                               Alias                               Set-Alias
sasv                              Alias                               Start-Service
sbp                               Alias                               Set-PSBreakpoint
sc                                Alias                               Set-Content
select                            Alias                               Select-Object
si                                Alias                               Set-Item
sl                                Alias                               Set-Location
sleep                             Alias                               Start-Sleep
sort                              Alias                               Sort-Object
sp                                Alias                               Set-ItemProperty
saps                              Alias                               Start-Process
start                             Alias                               Start-Process
spps                              Alias                               Stop-Process
spsv                              Alias                               Stop-Service
sv                                Alias                               Set-Variable
tee                               Alias                               Tee-Object
write                             Alias                               Write-Output
irm                               Alias                               Invoke-RestMethod
iwr                               Alias                               Invoke-WebRequest
asnp                              Alias                               Add-PSSnapin
gsnp                              Alias                               Get-PSSnapin
gwmi                              Alias                               Get-WmiObject
iwmi                              Alias                               Invoke-WmiMethod
ogv                               Alias                               Out-GridView
ise                               Alias                               powershell_ise.exe
rsnp                              Alias                               Remove-PSSnapin
rwmi                              Alias                               Remove-WmiObject
swmi                              Alias                               Set-WmiInstance
shcm                              Alias                               Show-Command
trcm                              Alias                               Trace-Command
wget                              Alias                               Invoke-WebRequest
curl                              Alias                               Invoke-WebRequest
lp                                Alias                               Out-Printer
cat                               Alias                               Get-Content
cd                                Alias                               Set-Location
clear                             Alias                               Clear-Host
cp                                Alias                               Copy-Item
h                                 Alias                               Get-History
history                           Alias                               Get-History
kill                              Alias                               Stop-Process
ls                                Alias                               Get-ChildItem
man                               Alias                               help
mount                             Alias                               New-PSDrive
md                                Alias                               mkdir
mv                                Alias                               Move-Item
popd                              Alias                               Pop-Location
ps                                Alias                               Get-Process
pushd                             Alias                               Push-Location
pwd                               Alias                               Get-Location
r                                 Alias                               Invoke-History
rm                                Alias                               Remove-Item
rmdir                             Alias                               Remove-Item
echo                              Alias                               Write-Output
cls                               Alias                               Clear-Host
chdir                             Alias                               Set-Location
copy                              Alias                               Copy-Item
del                               Alias                               Remove-Item
dir                               Alias                               Get-ChildItem
erase                             Alias                               Remove-Item
move                              Alias                               Move-Item
rd                                Alias                               Remove-Item
ren                               Alias                               Rename-Item
set                               Alias                               Set-Variable
type                              Alias                               Get-Content
icm                               Alias                               Invoke-Command
clhy                              Alias                               Clear-History
gjb                               Alias                               Get-Job
rcjb                              Alias                               Receive-Job
rjb                               Alias                               Remove-Job
sajb                              Alias                               Start-Job
spjb                              Alias                               Stop-Job
wjb                               Alias                               Wait-Job
sujb                              Alias                               Suspend-Job
rujb                              Alias                               Resume-Job
npssc                             Alias                               New-PSSessionConfigurationFile
ipsn                              Alias                               Import-PSSession
epsn                              Alias                               Export-PSSession
cnsn                              Alias                               Connect-PSSession
dnsn                              Alias                               Disconnect-PSSession
nsn                               Alias                               New-PSSession
gsn                               Alias                               Get-PSSession
rsn                               Alias                               Remove-PSSession
etsn                              Alias                               Enter-PSSession
rcsn                              Alias                               Receive-PSSession
exsn                              Alias                               Exit-PSSession
sls                               Alias                               Select-String
CFS                               Alias                               ConvertFrom-String
fhx                               Alias                               Format-Hex
gcb                               Alias                               Get-Clipboard
gin                               Alias                               Get-ComputerInfo
gtz                               Alias                               Get-TimeZone
scb                               Alias                               Set-Clipboard
stz                               Alias                               Set-TimeZone
>> TerminatingError(): "The pipeline has been stopped."
>> TerminatingError(): "The pipeline has been stopped."
PS C:\Windows\system32> get-help -Category afawfaw
>> TerminatingError(Get-Help): "Cannot validate argument on parameter 'Category'. The argument "afawfaw" does not belong to the set "Alias,Cmdlet,Provider,General,FAQ,Glossary,HelpFile,ScriptCommand,Function,Filter,ExternalScript,All,DefaultHelp,Workflow,DscResource,Class,Configuration" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again."
Get-Help : Cannot validate argument on parameter 'Category'. The argument "afawfaw" does not belong to the set "Alias,Cm
dlet,Provider,General,FAQ,Glossary,HelpFile,ScriptCommand,Function,Filter,ExternalScript,All,DefaultHelp,Workflow,DscRes
ource,Class,Configuration" specified by the ValidateSet attribute. Supply an argument that is in the set and then try 
the command again.
At line:1 char:20
+ get-help -Category afawfaw
+                    ~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Get-Help], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.GetHelpCommand
Get-Help : Cannot validate argument on parameter 'Category'. The argument "afawfaw" does not belong to the set
"Alias,Cmdlet,Provider,General,FAQ,Glossary,HelpFile,ScriptCommand,Function,Filter,ExternalScript,All,DefaultHelp,Workflow,DscResource,Class,Configuration" specified by the ValidateSet attribute. Supply an argument that is in the set
and then try the command again.
At line:1 char:20
+ get-help -Category afawfaw
+                    ~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Get-Help], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.GetHelpCommand

PS C:\Windows\system32> get-help -Category Provider

Name                              Category  Module                    Synopsis
----                              --------  ------                    --------
Registry                          Provider  Microsoft.PowerShell.Core Provides access to the system registry keys and values from Windows PowerShell.
Alias                             Provider  Microsoft.PowerShell.Core Provides access to the Windows PowerShell aliases and the values that they represent.
Environment                       Provider  Microsoft.PowerShell.Core Provides access to the Windows environment variables.
FileSystem                        Provider  Microsoft.PowerShell.Core Provides access to files and directories.
Function                          Provider  Microsoft.PowerShell.Core Provides access to the functions defined in Windows PowerShell.
Variable                          Provider  Microsoft.PowerShell.Core Provides access to the Windows PowerShell variables and to their values.
Certificate                       Provider                            Provides access to X.509 certificate stores and certificates in Windows PowerShell.
WSMan                             Provider                            Provides access to Web Services for Management (WS-Management) configuration information.


PS C:\Windows\system32> get-help certificatge
get-help : Get-Help could not find certificatge in a help file in this session. To download updated help topics type: 
"Update-Help". To get help online, search for the help topic in the TechNet library at 
https:/go.microsoft.com/fwlink/?LinkID=107116.
At line:1 char:1
+ get-help certificatge
+ ~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (:) [Get-Help], HelpNotFoundException
    + FullyQualifiedErrorId : HelpNotFound,Microsoft.PowerShell.Commands.GetHelpCommand
get-help : Get-Help could not find certificatge in a help file in this session. To download updated help topics type: "Update-Help". To get help online, search for the help topic in the TechNet library at
https:/go.microsoft.com/fwlink/?LinkID=107116.
At line:1 char:1
+ get-help certificatge
+ ~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (:) [Get-Help], HelpNotFoundException
    + FullyQualifiedErrorId : HelpNotFound,Microsoft.PowerShell.Commands.GetHelpCommand

PS C:\Windows\system32> get-help certificate

PROVIDER NAME
    Certificate

DRIVES
    Cert:

SYNOPSIS
    Provides access to X.509 certificate stores and certificates in Windows PowerShell.

DESCRIPTION
    The Windows PowerShell Certificate provider lets you navigate the certificate namespace and view the certificate stores and certificates. It also lets you open the Certificates snap-in for the Microsoft Management Console (MMC).

    NOTE: Beginning in Windows PowerShell 3.0, the Microsoft.PowerShell.Security module that contains the Certificate Provider is not imported automatically into every session. To use the Cert: drive, use the Import-Module cmdlet to
    import the module, or run a command that uses the Cert: drive, such as a "Set-Location Cert:" command.

    Beginning in Windows PowerShell 3.0, the Certificate provider enhances its support for managing Secure Socket Layer (SSL) certificates for web hosting by adding support for cmdlets and new dynamic parameters that create and delete
    certificate stores in the LocalMachine certificate store location, and find, move, and delete certificates.

    Dynamic parameters DocumentEncryptionCert, DnsName, EKU, SSLServerAuthentication, and ExpiringInDays have been added to the Get-ChildItem cmdlet in the Cert: drive. Also, a DeleteKey dynamic parameter has been added to Remove-Item
    in the Cert: drive.

    New script properties, DnsNameList, EnhancedKeyUsageList, and SendAsTrustedIssuer, have been added to the x509Certificate2 object that represents the certificates to make it easy to search and manage the certificates.

    These new features let you search for certificates based on their DNS names and expiration dates, and distinguish client and server authentication certificates by the value of their Enhanced Key Usage (EKU) properties.

    These enhancements are designed to support the new WebHosting certificate store created by IIS. This certificate store is optimized to scale for efficient, automated management of the thousands of certificates that are required for
    dynamic shared hosting.

    To populate the DnsNameList property, the Certificate provider copies the content from the DNSName entry in the SubjectAlternativeName (SAN) extension. If the SAN extension is empty, the property is populated with content from the
    Subject field of the certificate.

    To populate the EnhancedKeyUsageList property, the Certificate provider copies the OID properties of the EnhancedKeyUsage (EKU) field in the certificate and creates a friendly name for it..

    The Certificate provider exposes the certificate namespace as the Cert: drive in Windows PowerShell. The Cert: drive has the following three levels:

    --  Store locations (Microsoft.PowerShell.Commands.X509StoreLocation), which are high-level containers that group the certificates for the current user and for all users. Each system has a CurrentUser and LocalMachine (all users)
    store location.

    -- Certificates stores (System.Security.Cryptography.X509Certificates.X509Store), which are physical stores in which certificates are saved and managed.

    -- X.509 certificates (System.Security.Cryptography.X509Certificates.X509Certificate2), each of which represent an X.509 certificate on the computer. Certificates are identified by their thumbprints.

    In Windows PowerShell 3.0, the Certificate provider supports the Get-Location, Set-Location, Get-Item, Get-ChildItem, Invoke-Item, Move-Item, New-Item, and Remove-Item cmdlets.

    In Windows PowerShell 2.0, the Certificate provider supports the Get-Location, Set-Location, Get-Item, Get-ChildItem, and Invoke-Item cmdlets.

    In addition, Windows PowerShell Security module (Microsoft.PowerShell.Security), which includes the Certificate provider, also includes cmdlets to get and set Authenticode signatures and to get certificates. For a list of cmdlets
    in the Security module, type "get-command -module *security".

CAPABILITIES
    ShouldProcess

TASKS
    TASK: Navigating the Cert: Drive




        -------------------------- EXAMPLE 1 --------------------------

        This command uses the Set-Location cmdlet to change the current location to the Cert: drive.

        set-location cert:



        -------------------------- EXAMPLE 2 --------------------------

        This command uses the Set-Location command to change the current location to the Root certificate store in the LocalMachine store location. Use a backslash (\) or a forward slash (/) to indicate a level of the Cert: drive.

        set-location -path LocalMachine\Root


        If you are not in the Cert: drive, begin the path with the drive name.


    TASK: Displaying the Contents of the Cert: Drive




        -------------------------- EXAMPLE 1 --------------------------

        This command uses the Get-ChildItem cmdlet to display the certificate stores in the CurrentUser certificate store location.

        get-childitem -path cert:\CurrentUser


        If you are in the Cert: drive, you can omit the drive name.
        -------------------------- EXAMPLE 2 --------------------------

        This command uses the Get-ChildItem cmdlet to display the certificates in the My certificate store.

        get-childitem -path cert:\CurrentUser\My


        If you are in the Cert: drive, you can omit the drive name.
        -------------------------- EXAMPLE 3 --------------------------

        This command uses the Get-Item cmdlet to get the "My" certificate store and the Property parameter of Format-List with a wildcard character (*) to display all of the properties of the store.

        get-item -path cert:\CurrentUser\My | format-list *



        -------------------------- EXAMPLE 4 --------------------------

        This command gets a certificate and displays all of its properties. It uses the Get-ChildItem cmdlet to get the certificate and the Property parameter of Format-List with a wildcard character (*) to display all of the
        properties of the certificate.

        The certificate is identified by its thumbprint.

        get-childitem -path cert:\LocalMachine\my\6B8223358119BB08840DEE50FD8AF9EA776CE66B | format-list -property *



        -------------------------- EXAMPLE 5 --------------------------

        This command displays the web hosting properties of all certificates in the LocalMachine certificate store location.

        It uses the Recurse parameter of the Get-ChildItem cmdlet to get all certificates in all stores of the LocalMachine store location. A pipeline operator sends the certificates to the Format-Table command, which displays the
        selected properties of each certificate in a table.

        Get-ChildItem -Path cert:\LocalMachine -Recurse | Format-Table -Property DnsNameList, EnhancedKeyUsageList, NotAfter, SendAsTrustedIssuer





    TASK: Opening the Certificates MMC Snap-in




        -------------------------- EXAMPLE 1 --------------------------

        This command opens the Certificates MMC snap-in to manage the specified certificate.

        invoke-item cert:\CurrentUser\my\6B8223358119BB08840DEE50FD8AF9EA776CE66B





    TASK: Getting Selected Certificates




        -------------------------- EXAMPLE 1 --------------------------

        This command uses the CodeSigningCert and Recurse parameters of the Get-ChildItem cmdlet to get all of the certificates on the computer that have code-signing authority.

        Get-ChildItem -Path cert: -CodeSigningCert -Recurse



        -------------------------- EXAMPLE 2 --------------------------

        This command uses the DNSName parameter of the Get-ChildItem cmdlet to get all of the certificates in the WebHosting store whose domain names contain "Fabrikam".

        Get-ChildItem -Path cert:\LocalMachine\WebHosting -DNSName "*fabrikam*"



        -------------------------- EXAMPLE 3 --------------------------

        This command uses the ExpiringInDays parameter of the Get-ChildItem cmdlet to get certificates that will expire within the next 30 days.

        Get-ChildItem -Path cert:\LocalMachine\WebHosting -ExpiringInDays 30



        -------------------------- EXAMPLE 4 --------------------------

        This command uses the Invoke-Command cmdlet to run a Get-ChildItem command on the Srv01 and Srv02 computers. A value of zero (0) in the ExpiringInDays parameter gets certificates on the Srv01 and Srv02 computers that have
        expired.

        Invoke-Command -ComputerName Srv01, Srv02 {Get-ChildItem -Path cert:\* -Recurse -ExpiringInDays 0}



        -------------------------- EXAMPLE 5 --------------------------

        This command uses the SSLServerAuthentication parameter of the Get-ChildItem cmdlet to get all
        Server SSL Certificates in the My and WebHosting stores.

        Get-ChildItem -Path cert:\LocalMachine\My, cert:\LocalMachine\WebHosting -SSLServerAuthentication



        -------------------------- EXAMPLE 6 --------------------------

        This command gets all certificates in the LocalMachine store location that have "fabrikam" in their DNS name, "Client Authentication" in their EKU, a value of $true for the SendAsTrustedIssuer property, and do not expire within
        the next 30 days.

        Get-ChildItem -Path cert:\* -Recurse  -DNSName "*fabrikam*" -EKU "*Client Authentication*" | Where-Object {$_.SendAsTrustedIssuer -and $_.NotAfter -gt (get-date).AddDays.(30)}


        The NotAfter property stores the certificate expiration date.


    TASK: Moving Certificates




        -------------------------- EXAMPLE 1 --------------------------

        This command uses the Move-Item cmdlet to move a certificate from the My store to the WebHosting store.

        Move-Item will not move certificate stores and it will not move certificates to a different store location, such as moving a certificate from LocalMachine to CurrentUser. Also, Move-Item moves certificates, but it does not move
        private keys.

        Move-Item -Path cert:\LocalMachine\My\5DDC44652E62BF9AA1116DC41DE44AB47C87BDD0 -Destination cert:\LocalMachine\WebHosting



        -------------------------- EXAMPLE 2 --------------------------

        This command uses the SSLServerAuthentication parameter of the Get-ChildItem cmdlet to get SSL server authentication certificates in the MY certificate store.

        It uses a pipeline operator to send the certificates to the Move-Item cmdlet, which moves the certificates to the WebHosting store.

        Get-ChildItem -Path cert:\LocalMachine\My -SSLServerAuthentication | Move-Item -Destination cert:\LocalMachine\WebHosting





    TASK: Deleting Certificates and Private Keys




        -------------------------- EXAMPLE 1 --------------------------

        This command deletes a certificate from the CA certificate store, but leaves the associated private key intact.

        In the Cert: drive, the Remove-Item cmdlet supports only the DeleteKey, Path, WhatIf, and Confirm parameters. All other parameters are ignored.

        Remove-Item -Path cert:\LocalMachine\CA\5DDC44652E62BF9AA1116DC41DE44AB47C87BDD0



        -------------------------- EXAMPLE 2 --------------------------

        This series of commands enables delegation and then deletes the certificate and associated private key on a remote computer. To delete a private key on a remote computer, you must use delegated credentials.

        The first command uses the Enable-WSManCredSSP cmdlet to enable Credential Security Service Provider (CredSSP) authentication on a client on the S1 remote computer. CredSSP permits delegated authentication.

        The second command uses the Connect-WSMan cmdlet to connect the S1 computer to the WinRM service on the local computer. When this command completes, the S1 computer appears in the local WSMan: drive in Windows PowerShell.

        The third command uses the Set-Item cmdlet in the WSMan: drive to enable the CredSSP attribute for the WinRM service.

        The fourth command uses the New-PSSession cmdlet to start a remote session on the S1 computer with CredSSP authentication. It saves the session in the $s variable.

        The fifth command uses the Invoke-Command cmdlet to run a Remove-Item command in the session in the $s variable. The Remove-Item command uses the DeleteKey parameter to remove the private key along with the specified
        certificate.

        PS C:\>Enable-WSManCredSSP -Role Client -DelegateComputer S1

        PS C:\>Connect-WSMan -ComputerName S1 -Credential Domain01\Admin01

        PS C:\>Set-Item -Path WSMan:\S1\Service\Auth\CredSSP -Value $true

        PS C:\> $s  = New-PSSession S1 -Authentication CredSSP -Credential Domain01\Admin01

        PS C:\> Invoke-Command -Session $s { Remove-Item cert:\LocalMachine\My\D2D38EBA60CAA1C12055A2E1C83B15AD450110C2 -DeleteKey  }



        -------------------------- EXAMPLE 3 --------------------------

        This command uses the ExpiringInDays parameter of the Get-ChildItem cmdlet with a value of 0 to get certificates in the WebHosting store that have expired.

        It uses a pipeline operator to pass the certificates to the Remove-Item cmdlet, which deletes them. The command uses the DeleteKey parameter to delete the private key along with the certificate.

        Get-ChildItem -Path cert:\LocalMachine\WebHosting -ExpiringInDays 0 | Remove-Item -DeleteKey



        -------------------------- EXAMPLE 4 --------------------------

        This command deletes all certificates that have a DNS name that contains "Fabrikam".

        It uses the DNSName parameter of the Get-ChildItem cmdlet to get the certificates and the Remove-Item cmdlet to delete them.

        Get-ChildItem -Path cert:\LocalMachine -DnsName *Fabrikam* | Remove-Item





    TASK: Creating Certificate Stores




        -------------------------- EXAMPLE 1 --------------------------

        This command creates a new certificate store named "CustomStore" in the LocalMachine store location.

        In the Cert: drive, the New-Item cmdlet creates certificate stores in the LocalMachine store location. It supports the Name, Path, WhatIf, and Confirm parameters. All other parameters are ignored.

        New-Item -Path cert:\LocalMachine\CustomStore


        The command returns a System.Security.Cryptography.X509Certificates.X509Store that represents the new certificate store.
        -------------------------- EXAMPLE 2 --------------------------

        This command creates a new certificate store named "HostingStore" in the LocalMachine store location on the Server01 computer.

        The command uses the Invoke-Command cmdlet to run a New-Item command on the Server01 computer.

        Invoke-Command -ComputerName Server01 { New-Item -Path cert:\LocalMachine\CustomStore }


        The command returns a System.Security.Cryptography.X509Certificates.X509Store that represents the new certificate store.


    TASK: Deleting Certificate Stores




        -------------------------- EXAMPLE 1 --------------------------

        This command uses the Remove-Item cmdlet to delete the Test1 certificate store. It uses the Recurse parameter to delete the certificates in the Test1 store.

        In the Cert: drive, the Remove-Item cmdlet deletes user-created certificate stores from the LocalMachine store location. You cannot use the Remove-Item cmdlet to delete Windows system certificate stores.

        In the Cert: drive, the Remove-Item cmdlet supports only the Path, WhatIf, and Confirm parameters. All other parameters are ignored.

        Remove-Item -Path cert:\LocalMachine\TestStore -Recurse


        If the certificate store contains certificates and you omit the Recurse parameter, Remove-Item prompts you for confirmation before deleting any items.
        -------------------------- EXAMPLE 2 --------------------------

        This command uses the Invoke-Command cmdlet to run a Remove-Item command on the S1 and S2 computers. The Remove-Item command includes the Recurse parameter, which deletes the certificates in the store before it deletes the
        store.

        Invoke-Command -ComputerName S1, S2 { Remove-Item -Path cert:\LocalMachine\TestStore  -Recurse}



        -------------------------- EXAMPLE 3 --------------------------

        This command deletes all certificate stores in the LocalMachine store location that have "Test" in their names.

        Remove-Item -path cert:\LocalMachine\*test* -Recurse







DYNAMIC PARAMETERS
    -CodeSigningCert <System.Management.Automation.SwitchParameter>
        Gets only those certificates with code-signing authority.

        This parameter gets certificates that have "Code Signing" in their EnhancedKeyUsageList property value.

        Because certificates that have an empty EnhancedKeyUsageList can be used for all purposes, searches for code signing certificates also return certificates that have an empty EnhancedKeyUsageList property value.

        This parameter is valid in all subdirectories of the Certificate provider, but it is effective only on certificates.


        Cmdlets Supported: Get-Item, Get-ChildItem

    -DocumentEncryptionCert <System.Management.Automation.SwitchParameter>
        Gets those certificates in the certificate provider that are used for document encryption. Document encryption certificates have a value of "{text}%szOID_DOCUMENT_ENCRYPTION%" for the EnhancedKeyUsageList property. This
        parameter was introduced in Windows PowerShell 5.0.


        Cmdlets Supported: Get-Item, Get-ChildItem

    - <>






        Cmdlets Supported:

    -DnsName <Microsoft.PowerShell.Commands.DnsNameRepresentation>
        Gets certificates that have the specified domain name or name pattern in the DNSNameList property of the certificate.

        The value of this parameter can either be Unicode or ASCII. Punycode values are converted to Unicode. Wildcard characters (*) are permitted.

        This parameter is valid in all subdirectories of the Certificate provider, but it is effective only on certificates.

        This parameter was introduced in Windows PowerShell 3.0.





        Cmdlets Supported: Get-ChildItem

    -EKU <System.String>
        Gets certificates that have the specified text or text pattern in the EnhancedKeyUsageList property of the certificate. Wildcard characters (*) are permitted. The EnhancedKeyUsageList property contains the friendly name and the
        OID fields of the EKU.

        Because certificates that have an empty EnhancedKeyUsageList can be used for all purposes, all EKU searches return certificates that have an empty EnhancedKeyUsageList property value.

        This parameter is valid in all subdirectories of the Certificate provider, but it is effective only on certificates.

        This parameter was introduced in Windows PowerShell 3.0.





        Cmdlets Supported: Get-ChildItem

    -ExpiringInDays <System.Int32>
        Gets certificates that are expiring in or before the specified number of days. Enter an integer. A value of 0 (zero) gets certificates that have expired.

        This parameter is valid in all subdirectories of the Certificate provider, but it is effective only on certificates.

        This parameter was introduced in Windows PowerShell 3.0.





        Cmdlets Supported: Get-ChildItem

    -SSLServerAuthentication <System.Management.Automation.SwitchParameter>
        Gets only server certificates for SSL web hosting. This parameter gets certificates that have "Server Authentication" in their EnhancedKeyUsageList property value.

        Because certificates that have an empty EnhancedKeyUsageList can be used for all purposes, SSLServerAuthentication searches also return certificates that have an empty EnhancedKeyUsageList property value.

        This parameter is valid in all subdirectories of the Certificate provider, but it is effective only on certificates.

        This parameter was introduced in Windows PowerShell 3.0.





        Cmdlets Supported: Get-ChildItem

    -DeleteKey <System.Management.Automation.SwitchParameter>
        Deletes the associated private key when it deletes the certificate.

        To delete a private key that is associated with a user certificate in the Cert:\CurrentUser store on a remote computer, you must use delegated credentials. When using the Invoke-Command cmdlet to run a Remove-Item command
        remotely, after considering the security risks, use the CredSSP parameter to enable delegation.

        This parameter is valid in all subdirectories of the Certificate provider, but it is effective only on certificates.

        This parameter was introduced in Windows PowerShell 3.0.





        Cmdlets Supported: Remove-Item


NOTES


RELATED LINKS
    about_Providers
    about_Signing
    Get-AuthenticodeSignature
    Set-AuthenticodeSignature
    Get-PfxCertificate



PS C:\Windows\system32> get-help certificate -ShowWindow
PS C:\Windows\system32> exit
**********************
Windows PowerShell transcript end
End time: 20191202153037
**********************
